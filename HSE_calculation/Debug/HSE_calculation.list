
HSE_calculation.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000017c  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000340  08000348  00010348  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000340  08000340  00010348  2**0
                  CONTENTS
  4 .ARM          00000000  08000340  08000340  00010348  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000340  08000348  00010348  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000340  08000340  00010340  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000344  08000344  00010344  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010348  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  08000348  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  08000348  0002001c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00010348  2**0
                  CONTENTS, READONLY
 12 .debug_info   00000100  00000000  00000000  00010378  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00000080  00000000  00000000  00010478  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000048  00000000  00000000  000104f8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000030  00000000  00000000  00010540  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00000f3e  00000000  00000000  00010570  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00000411  00000000  00000000  000114ae  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00003c82  00000000  00000000  000118bf  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00015541  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000058  00000000  00000000  000155bc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000000 	.word	0x20000000
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08000328 	.word	0x08000328

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000004 	.word	0x20000004
 8000200:	08000328 	.word	0x08000328

08000204 <main>:
// Maping Alternate function register
#define GPIOA_AFRH_OFFSET_ADD	 	0x24 // Alternate function register
#define GPIOA_AFRH_ADD				(GPIOA_BASE_ADD + GPIOA_AFRH_OFFSET_ADD )

int main(void)
{
 8000204:	b480      	push	{r7}
 8000206:	b085      	sub	sp, #20
 8000208:	af00      	add	r7, sp, #0
	uint32_t *pRccCfgreg = (uint32_t*)RCC_APB2_ADD;
 800020a:	4b1c      	ldr	r3, [pc, #112]	; (800027c <main+0x78>)
 800020c:	60fb      	str	r3, [r7, #12]
	//Clearing BIT in MCO1
	*pRccCfgreg &= ~(0x3<<21);  //To clear bit using value 3 (clear 21 and 22 bit positions)
 800020e:	68fb      	ldr	r3, [r7, #12]
 8000210:	681b      	ldr	r3, [r3, #0]
 8000212:	f423 02c0 	bic.w	r2, r3, #6291456	; 0x600000
 8000216:	68fb      	ldr	r3, [r7, #12]
 8000218:	601a      	str	r2, [r3, #0]
	//Set a BIT in MC01
	*pRccCfgreg |= (0x2<<21);	//To Set Bit using value 2   (set 21 and 22 bit positions)
 800021a:	68fb      	ldr	r3, [r7, #12]
 800021c:	681b      	ldr	r3, [r3, #0]
 800021e:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8000222:	68fb      	ldr	r3, [r7, #12]
 8000224:	601a      	str	r2, [r3, #0]

	//Enable clock for GPIOA register
	uint32_t *pGPIOA =(uint32_t*)RCC_AHB1ENR_GPIOA_REG;
 8000226:	4b16      	ldr	r3, [pc, #88]	; (8000280 <main+0x7c>)
 8000228:	60bb      	str	r3, [r7, #8]
	*pGPIOA &= ~(0x1); //CLEARBIT
 800022a:	68bb      	ldr	r3, [r7, #8]
 800022c:	681b      	ldr	r3, [r3, #0]
 800022e:	f023 0201 	bic.w	r2, r3, #1
 8000232:	68bb      	ldr	r3, [r7, #8]
 8000234:	601a      	str	r2, [r3, #0]
	*pGPIOA |= (0x1);  //SETBIT
 8000236:	68bb      	ldr	r3, [r7, #8]
 8000238:	681b      	ldr	r3, [r3, #0]
 800023a:	f043 0201 	orr.w	r2, r3, #1
 800023e:	68bb      	ldr	r3, [r7, #8]
 8000240:	601a      	str	r2, [r3, #0]

	//Enable portmode Register as funcional output
	uint32_t *pportmodereg =(uint32_t*) GPIOA_PORTMODE_REG;
 8000242:	4b10      	ldr	r3, [pc, #64]	; (8000284 <main+0x80>)
 8000244:	607b      	str	r3, [r7, #4]
	*pportmodereg &= ~(0x3 <<16); //CLEARBIT
 8000246:	687b      	ldr	r3, [r7, #4]
 8000248:	681b      	ldr	r3, [r3, #0]
 800024a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800024e:	687b      	ldr	r3, [r7, #4]
 8000250:	601a      	str	r2, [r3, #0]
	*pportmodereg |= (0x2 <<16);
 8000252:	687b      	ldr	r3, [r7, #4]
 8000254:	681b      	ldr	r3, [r3, #0]
 8000256:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800025a:	687b      	ldr	r3, [r7, #4]
 800025c:	601a      	str	r2, [r3, #0]

	//Enable Alternate functioin mode register in GPIOA PA8
	uint32_t *pgpioaAFRH = (uint32_t*)GPIOA_AFRH_ADD;
 800025e:	4b0a      	ldr	r3, [pc, #40]	; (8000288 <main+0x84>)
 8000260:	603b      	str	r3, [r7, #0]
	*pgpioaAFRH &= ~(0xf<<0); //CLEAR BIT using 1111 in AFRH register to set AFO
 8000262:	683b      	ldr	r3, [r7, #0]
 8000264:	681b      	ldr	r3, [r3, #0]
 8000266:	f023 020f 	bic.w	r2, r3, #15
 800026a:	683b      	ldr	r3, [r7, #0]
 800026c:	601a      	str	r2, [r3, #0]

	//Using prescalaer
	*pRccCfgreg |= (0x3<<24);
 800026e:	68fb      	ldr	r3, [r7, #12]
 8000270:	681b      	ldr	r3, [r3, #0]
 8000272:	f043 7240 	orr.w	r2, r3, #50331648	; 0x3000000
 8000276:	68fb      	ldr	r3, [r7, #12]
 8000278:	601a      	str	r2, [r3, #0]




	for(;;);
 800027a:	e7fe      	b.n	800027a <main+0x76>
 800027c:	40023808 	.word	0x40023808
 8000280:	40023830 	.word	0x40023830
 8000284:	40020000 	.word	0x40020000
 8000288:	40020024 	.word	0x40020024

0800028c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800028c:	480d      	ldr	r0, [pc, #52]	; (80002c4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800028e:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000290:	480d      	ldr	r0, [pc, #52]	; (80002c8 <LoopForever+0x6>)
  ldr r1, =_edata
 8000292:	490e      	ldr	r1, [pc, #56]	; (80002cc <LoopForever+0xa>)
  ldr r2, =_sidata
 8000294:	4a0e      	ldr	r2, [pc, #56]	; (80002d0 <LoopForever+0xe>)
  movs r3, #0
 8000296:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000298:	e002      	b.n	80002a0 <LoopCopyDataInit>

0800029a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800029a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800029c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800029e:	3304      	adds	r3, #4

080002a0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80002a0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80002a2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80002a4:	d3f9      	bcc.n	800029a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80002a6:	4a0b      	ldr	r2, [pc, #44]	; (80002d4 <LoopForever+0x12>)
  ldr r4, =_ebss
 80002a8:	4c0b      	ldr	r4, [pc, #44]	; (80002d8 <LoopForever+0x16>)
  movs r3, #0
 80002aa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80002ac:	e001      	b.n	80002b2 <LoopFillZerobss>

080002ae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80002ae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80002b0:	3204      	adds	r2, #4

080002b2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80002b2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80002b4:	d3fb      	bcc.n	80002ae <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 80002b6:	f3af 8000 	nop.w
/* Call static constructors */
  bl __libc_init_array
 80002ba:	f000 f811 	bl	80002e0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80002be:	f7ff ffa1 	bl	8000204 <main>

080002c2 <LoopForever>:

LoopForever:
    b LoopForever
 80002c2:	e7fe      	b.n	80002c2 <LoopForever>
  ldr   r0, =_estack
 80002c4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80002c8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80002cc:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 80002d0:	08000348 	.word	0x08000348
  ldr r2, =_sbss
 80002d4:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80002d8:	2000001c 	.word	0x2000001c

080002dc <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80002dc:	e7fe      	b.n	80002dc <ADC_IRQHandler>
	...

080002e0 <__libc_init_array>:
 80002e0:	b570      	push	{r4, r5, r6, lr}
 80002e2:	4e0d      	ldr	r6, [pc, #52]	; (8000318 <__libc_init_array+0x38>)
 80002e4:	4c0d      	ldr	r4, [pc, #52]	; (800031c <__libc_init_array+0x3c>)
 80002e6:	1ba4      	subs	r4, r4, r6
 80002e8:	10a4      	asrs	r4, r4, #2
 80002ea:	2500      	movs	r5, #0
 80002ec:	42a5      	cmp	r5, r4
 80002ee:	d109      	bne.n	8000304 <__libc_init_array+0x24>
 80002f0:	4e0b      	ldr	r6, [pc, #44]	; (8000320 <__libc_init_array+0x40>)
 80002f2:	4c0c      	ldr	r4, [pc, #48]	; (8000324 <__libc_init_array+0x44>)
 80002f4:	f000 f818 	bl	8000328 <_init>
 80002f8:	1ba4      	subs	r4, r4, r6
 80002fa:	10a4      	asrs	r4, r4, #2
 80002fc:	2500      	movs	r5, #0
 80002fe:	42a5      	cmp	r5, r4
 8000300:	d105      	bne.n	800030e <__libc_init_array+0x2e>
 8000302:	bd70      	pop	{r4, r5, r6, pc}
 8000304:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000308:	4798      	blx	r3
 800030a:	3501      	adds	r5, #1
 800030c:	e7ee      	b.n	80002ec <__libc_init_array+0xc>
 800030e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000312:	4798      	blx	r3
 8000314:	3501      	adds	r5, #1
 8000316:	e7f2      	b.n	80002fe <__libc_init_array+0x1e>
 8000318:	08000340 	.word	0x08000340
 800031c:	08000340 	.word	0x08000340
 8000320:	08000340 	.word	0x08000340
 8000324:	08000344 	.word	0x08000344

08000328 <_init>:
 8000328:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800032a:	bf00      	nop
 800032c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800032e:	bc08      	pop	{r3}
 8000330:	469e      	mov	lr, r3
 8000332:	4770      	bx	lr

08000334 <_fini>:
 8000334:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000336:	bf00      	nop
 8000338:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800033a:	bc08      	pop	{r3}
 800033c:	469e      	mov	lr, r3
 800033e:	4770      	bx	lr
