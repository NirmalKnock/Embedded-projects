
STM32F446RE Driver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001280  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08001444  08001444  0002001c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08001444  08001444  0002001c  2**0
                  CONTENTS
  4 .ARM          00000000  08001444  08001444  0002001c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001444  08001444  0002001c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001444  08001444  00011444  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001448  08001448  00011448  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000001c  20000000  0800144c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000060  2000001c  08001468  0002001c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000007c  08001468  0002007c  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  0002001c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00001ebe  00000000  00000000  00020046  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00000607  00000000  00000000  00021f04  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000001d8  00000000  00000000  00022510  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000001a0  00000000  00000000  000226e8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00002387  00000000  00000000  00022888  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00001542  00000000  00000000  00024c0f  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00009c52  00000000  00000000  00026151  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0002fda3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000006f8  00000000  00000000  0002fe20  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	2000001c 	.word	0x2000001c
 80001e0:	00000000 	.word	0x00000000
 80001e4:	0800142c 	.word	0x0800142c

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000020 	.word	0x20000020
 8000200:	0800142c 	.word	0x0800142c

08000204 <delay>:
void delay(void);


//delay
void delay(void)
{
 8000204:	b480      	push	{r7}
 8000206:	b083      	sub	sp, #12
 8000208:	af00      	add	r7, sp, #0
	for (uint32_t i =0 ; i<500000/2;i++);
 800020a:	2300      	movs	r3, #0
 800020c:	607b      	str	r3, [r7, #4]
 800020e:	e002      	b.n	8000216 <delay+0x12>
 8000210:	687b      	ldr	r3, [r7, #4]
 8000212:	3301      	adds	r3, #1
 8000214:	607b      	str	r3, [r7, #4]
 8000216:	687b      	ldr	r3, [r7, #4]
 8000218:	4a03      	ldr	r2, [pc, #12]	; (8000228 <delay+0x24>)
 800021a:	4293      	cmp	r3, r2
 800021c:	d9f8      	bls.n	8000210 <delay+0xc>
}
 800021e:	bf00      	nop
 8000220:	370c      	adds	r7, #12
 8000222:	46bd      	mov	sp, r7
 8000224:	bc80      	pop	{r7}
 8000226:	4770      	bx	lr
 8000228:	0003d08f 	.word	0x0003d08f

0800022c <I2C_Gpio_Init>:


void I2C_Gpio_Init(void)
{
 800022c:	b580      	push	{r7, lr}
 800022e:	b084      	sub	sp, #16
 8000230:	af00      	add	r7, sp, #0
	GPIO_Handle_t 	I2C_gpio;
	//clear all bits in structures


	I2C_gpio.pGPIOx = GPIOB;
 8000232:	4b0e      	ldr	r3, [pc, #56]	; (800026c <I2C_Gpio_Init+0x40>)
 8000234:	607b      	str	r3, [r7, #4]
	I2C_gpio.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_ALTFN;
 8000236:	2302      	movs	r3, #2
 8000238:	727b      	strb	r3, [r7, #9]
	I2C_gpio.GPIO_PinConfig.GPIO_PinAltFunMode = 4;
 800023a:	2304      	movs	r3, #4
 800023c:	737b      	strb	r3, [r7, #13]
	I2C_gpio.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_OD;
 800023e:	2301      	movs	r3, #1
 8000240:	733b      	strb	r3, [r7, #12]
	I2C_gpio.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PIN_PU;
 8000242:	2301      	movs	r3, #1
 8000244:	72fb      	strb	r3, [r7, #11]
	I2C_gpio.GPIO_PinConfig.GPIO_PinSpeed= GPIO_SPEED_FAST;
 8000246:	2302      	movs	r3, #2
 8000248:	72bb      	strb	r3, [r7, #10]

	//SCL
	I2C_gpio.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NUMBER_6;
 800024a:	2306      	movs	r3, #6
 800024c:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&I2C_gpio);
 800024e:	1d3b      	adds	r3, r7, #4
 8000250:	4618      	mov	r0, r3
 8000252:	f000 f9d9 	bl	8000608 <GPIO_Init>

	//SDA
	I2C_gpio.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NUMBER_7;
 8000256:	2307      	movs	r3, #7
 8000258:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&I2C_gpio);
 800025a:	1d3b      	adds	r3, r7, #4
 800025c:	4618      	mov	r0, r3
 800025e:	f000 f9d3 	bl	8000608 <GPIO_Init>

}
 8000262:	bf00      	nop
 8000264:	3710      	adds	r7, #16
 8000266:	46bd      	mov	sp, r7
 8000268:	bd80      	pop	{r7, pc}
 800026a:	bf00      	nop
 800026c:	40020400 	.word	0x40020400

08000270 <I2C_Peri_Init>:


void I2C_Peri_Init(void)
{
 8000270:	b580      	push	{r7, lr}
 8000272:	af00      	add	r7, sp, #0


	I2C1_Handle.pI2Cx = I2C1;
 8000274:	4b09      	ldr	r3, [pc, #36]	; (800029c <I2C_Peri_Init+0x2c>)
 8000276:	4a0a      	ldr	r2, [pc, #40]	; (80002a0 <I2C_Peri_Init+0x30>)
 8000278:	601a      	str	r2, [r3, #0]
	//Clearning bits in structure



	I2C1_Handle.I2C_Config.I2C_ACKControl = I2C_ACK_ENABLE;
 800027a:	4b08      	ldr	r3, [pc, #32]	; (800029c <I2C_Peri_Init+0x2c>)
 800027c:	2201      	movs	r2, #1
 800027e:	725a      	strb	r2, [r3, #9]
	I2C1_Handle.I2C_Config.I2C_DeviceAddress = MY_ADDR; 				//Check I2C spec , some addresses  are reserved (not needed for Master Mode
 8000280:	4b06      	ldr	r3, [pc, #24]	; (800029c <I2C_Peri_Init+0x2c>)
 8000282:	2261      	movs	r2, #97	; 0x61
 8000284:	721a      	strb	r2, [r3, #8]
	I2C1_Handle.I2C_Config.I2C_FMDuty_Cycle = I2C_FM_DUTY_2;
 8000286:	4b05      	ldr	r3, [pc, #20]	; (800029c <I2C_Peri_Init+0x2c>)
 8000288:	2201      	movs	r2, #1
 800028a:	815a      	strh	r2, [r3, #10]
	I2C1_Handle.I2C_Config.I2C_SCLSpeed = I2C_SCL_SPEED_SM; //Not needed for SM mode
 800028c:	4b03      	ldr	r3, [pc, #12]	; (800029c <I2C_Peri_Init+0x2c>)
 800028e:	4a05      	ldr	r2, [pc, #20]	; (80002a4 <I2C_Peri_Init+0x34>)
 8000290:	605a      	str	r2, [r3, #4]

	I2C_Init(&I2C1_Handle);
 8000292:	4802      	ldr	r0, [pc, #8]	; (800029c <I2C_Peri_Init+0x2c>)
 8000294:	f000 fcbc 	bl	8000c10 <I2C_Init>

}
 8000298:	bf00      	nop
 800029a:	bd80      	pop	{r7, pc}
 800029c:	2000005c 	.word	0x2000005c
 80002a0:	40005400 	.word	0x40005400
 80002a4:	000186a0 	.word	0x000186a0

080002a8 <Gpio_Button>:

void Gpio_Button(void)
{
 80002a8:	b580      	push	{r7, lr}
 80002aa:	b084      	sub	sp, #16
 80002ac:	af00      	add	r7, sp, #0
	GPIO_Handle_t Gpio_btn;
	Gpio_btn.pGPIOx  = GPIOC;
 80002ae:	4b09      	ldr	r3, [pc, #36]	; (80002d4 <Gpio_Button+0x2c>)
 80002b0:	607b      	str	r3, [r7, #4]

	//Clearning all bits in the structure
	Gpio_btn.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NUMBER_13;
 80002b2:	230d      	movs	r3, #13
 80002b4:	723b      	strb	r3, [r7, #8]
	Gpio_btn.GPIO_PinConfig.GPIO_PinMode =GPIO_MODE_IN;
 80002b6:	2300      	movs	r3, #0
 80002b8:	727b      	strb	r3, [r7, #9]
	Gpio_btn.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD;
 80002ba:	2300      	movs	r3, #0
 80002bc:	72fb      	strb	r3, [r7, #11]
	Gpio_btn.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 80002be:	2302      	movs	r3, #2
 80002c0:	72bb      	strb	r3, [r7, #10]

	GPIO_Init(&Gpio_btn);
 80002c2:	1d3b      	adds	r3, r7, #4
 80002c4:	4618      	mov	r0, r3
 80002c6:	f000 f99f 	bl	8000608 <GPIO_Init>

}
 80002ca:	bf00      	nop
 80002cc:	3710      	adds	r7, #16
 80002ce:	46bd      	mov	sp, r7
 80002d0:	bd80      	pop	{r7, pc}
 80002d2:	bf00      	nop
 80002d4:	40020800 	.word	0x40020800

080002d8 <main>:

int main(void)
{
 80002d8:	b580      	push	{r7, lr}
 80002da:	b082      	sub	sp, #8
 80002dc:	af02      	add	r7, sp, #8



	//I2C gpio Configuration
	I2C_Gpio_Init();
 80002de:	f7ff ffa5 	bl	800022c <I2C_Gpio_Init>

	//GPIO_button configuration
	Gpio_Button();
 80002e2:	f7ff ffe1 	bl	80002a8 <Gpio_Button>

	//I2C peripheral Configuration
	I2C_Peri_Init();
 80002e6:	f7ff ffc3 	bl	8000270 <I2C_Peri_Init>

	//I2C peripheral Control
	I2C_PeripheralControl(I2C1, ENABLE);
 80002ea:	2101      	movs	r1, #1
 80002ec:	482b      	ldr	r0, [pc, #172]	; (800039c <main+0xc4>)
 80002ee:	f000 fdd5 	bl	8000e9c <I2C_PeripheralControl>

	//I2C IRQ configuration
		I2C_IRQInterruptConfig(IRQ_NO_I2C1_EV, ENABLE);			//For Event
 80002f2:	2101      	movs	r1, #1
 80002f4:	201f      	movs	r0, #31
 80002f6:	f000 fded 	bl	8000ed4 <I2C_IRQInterruptConfig>
		I2C_IRQInterruptConfig(IRQ_NO_I2C1_ER, ENABLE);			//For Error
 80002fa:	2101      	movs	r1, #1
 80002fc:	2020      	movs	r0, #32
 80002fe:	f000 fde9 	bl	8000ed4 <I2C_IRQInterruptConfig>

	//Ack bit made 1 after PE enabled
	I2C_ManagaeAcking(I2C1,I2C_ACK_ENABLE);
 8000302:	2101      	movs	r1, #1
 8000304:	4825      	ldr	r0, [pc, #148]	; (800039c <main+0xc4>)
 8000306:	f000 fbab 	bl	8000a60 <I2C_ManagaeAcking>


	while (1)
	{
		//wait for button Press
		while ( GPIO_ReadFromInputPin(GPIOC, GPIO_PIN_NUMBER_13) );
 800030a:	bf00      	nop
 800030c:	210d      	movs	r1, #13
 800030e:	4824      	ldr	r0, [pc, #144]	; (80003a0 <main+0xc8>)
 8000310:	f000 fb12 	bl	8000938 <GPIO_ReadFromInputPin>
 8000314:	4603      	mov	r3, r0
 8000316:	2b00      	cmp	r3, #0
 8000318:	d1f8      	bne.n	800030c <main+0x34>
		delay();
 800031a:	f7ff ff73 	bl	8000204 <delay>

		 Command_Code	= 		0x51;
 800031e:	4b21      	ldr	r3, [pc, #132]	; (80003a4 <main+0xcc>)
 8000320:	2251      	movs	r2, #81	; 0x51
 8000322:	701a      	strb	r2, [r3, #0]

		//Send the command data for 1 byte of data to get length information

		 //Wait untill the I2C becomes ready, because master IT returns its STATE
		while (I2C_MasterSendDataIT(&I2C1_Handle, &Command_Code, 1, SLAVE_ADDR,I2C_ENABLE_SR) != I2C_READY);				//1 byte of data send (Command Code)
 8000324:	bf00      	nop
 8000326:	2301      	movs	r3, #1
 8000328:	9300      	str	r3, [sp, #0]
 800032a:	2368      	movs	r3, #104	; 0x68
 800032c:	2201      	movs	r2, #1
 800032e:	491d      	ldr	r1, [pc, #116]	; (80003a4 <main+0xcc>)
 8000330:	481d      	ldr	r0, [pc, #116]	; (80003a8 <main+0xd0>)
 8000332:	f000 fd29 	bl	8000d88 <I2C_MasterSendDataIT>
 8000336:	4603      	mov	r3, r0
 8000338:	2b00      	cmp	r3, #0
 800033a:	d1f4      	bne.n	8000326 <main+0x4e>

		while (I2C_MasterReceiveDataIT(&I2C1_Handle, &len, 1, SLAVE_ADDR,I2C_ENABLE_SR) != I2C_READY);
 800033c:	bf00      	nop
 800033e:	2301      	movs	r3, #1
 8000340:	9300      	str	r3, [sp, #0]
 8000342:	2368      	movs	r3, #104	; 0x68
 8000344:	2201      	movs	r2, #1
 8000346:	4919      	ldr	r1, [pc, #100]	; (80003ac <main+0xd4>)
 8000348:	4817      	ldr	r0, [pc, #92]	; (80003a8 <main+0xd0>)
 800034a:	f000 fd60 	bl	8000e0e <I2C_MasterReceiveDataIT>
 800034e:	4603      	mov	r3, r0
 8000350:	2b00      	cmp	r3, #0
 8000352:	d1f4      	bne.n	800033e <main+0x66>



		Command_Code =    0x52;
 8000354:	4b13      	ldr	r3, [pc, #76]	; (80003a4 <main+0xcc>)
 8000356:	2252      	movs	r2, #82	; 0x52
 8000358:	701a      	strb	r2, [r3, #0]
	    //send the command code of2nd to receive n length
		while (I2C_MasterSendDataIT(&I2C1_Handle, &Command_Code, 1, SLAVE_ADDR,I2C_ENABLE_SR) != I2C_READY);						//send 2nd command code (commandcode 1)
 800035a:	bf00      	nop
 800035c:	2301      	movs	r3, #1
 800035e:	9300      	str	r3, [sp, #0]
 8000360:	2368      	movs	r3, #104	; 0x68
 8000362:	2201      	movs	r2, #1
 8000364:	490f      	ldr	r1, [pc, #60]	; (80003a4 <main+0xcc>)
 8000366:	4810      	ldr	r0, [pc, #64]	; (80003a8 <main+0xd0>)
 8000368:	f000 fd0e 	bl	8000d88 <I2C_MasterSendDataIT>
 800036c:	4603      	mov	r3, r0
 800036e:	2b00      	cmp	r3, #0
 8000370:	d1f4      	bne.n	800035c <main+0x84>

		while (I2C_MasterReceiveDataIT(&I2C1_Handle, rcv_buff, len, SLAVE_ADDR,I2C_DISABLE_SR) != I2C_READY);							//Receive all data
 8000372:	bf00      	nop
 8000374:	4b0d      	ldr	r3, [pc, #52]	; (80003ac <main+0xd4>)
 8000376:	781b      	ldrb	r3, [r3, #0]
 8000378:	461a      	mov	r2, r3
 800037a:	2300      	movs	r3, #0
 800037c:	9300      	str	r3, [sp, #0]
 800037e:	2368      	movs	r3, #104	; 0x68
 8000380:	490b      	ldr	r1, [pc, #44]	; (80003b0 <main+0xd8>)
 8000382:	4809      	ldr	r0, [pc, #36]	; (80003a8 <main+0xd0>)
 8000384:	f000 fd43 	bl	8000e0e <I2C_MasterReceiveDataIT>
 8000388:	4603      	mov	r3, r0
 800038a:	2b00      	cmp	r3, #0
 800038c:	d1f2      	bne.n	8000374 <main+0x9c>

	    rcv_buff[len+1] = '\0';
 800038e:	4b07      	ldr	r3, [pc, #28]	; (80003ac <main+0xd4>)
 8000390:	781b      	ldrb	r3, [r3, #0]
 8000392:	3301      	adds	r3, #1
 8000394:	4a06      	ldr	r2, [pc, #24]	; (80003b0 <main+0xd8>)
 8000396:	2100      	movs	r1, #0
 8000398:	54d1      	strb	r1, [r2, r3]
		while ( GPIO_ReadFromInputPin(GPIOC, GPIO_PIN_NUMBER_13) );
 800039a:	e7b6      	b.n	800030a <main+0x32>
 800039c:	40005400 	.word	0x40005400
 80003a0:	40020800 	.word	0x40020800
 80003a4:	20000078 	.word	0x20000078
 80003a8:	2000005c 	.word	0x2000005c
 80003ac:	20000038 	.word	0x20000038
 80003b0:	2000003c 	.word	0x2000003c

080003b4 <I2C1_EV_IRQHandler>:
	}
	return 0 ;
}

void I2C1_EV_IRQHandler(void)
{
 80003b4:	b580      	push	{r7, lr}
 80003b6:	af00      	add	r7, sp, #0

	I2C_EV_IRQHandling(&I2C1_Handle);
 80003b8:	4802      	ldr	r0, [pc, #8]	; (80003c4 <I2C1_EV_IRQHandler+0x10>)
 80003ba:	f000 feca 	bl	8001152 <I2C_EV_IRQHandling>

}
 80003be:	bf00      	nop
 80003c0:	bd80      	pop	{r7, pc}
 80003c2:	bf00      	nop
 80003c4:	2000005c 	.word	0x2000005c

080003c8 <I2C1_ER_IRQHandler>:
void I2C1_ER_IRQHandler(void )
{
 80003c8:	b580      	push	{r7, lr}
 80003ca:	af00      	add	r7, sp, #0
	I2C_ER_IRQHandling(&I2C1_Handle);
 80003cc:	4802      	ldr	r0, [pc, #8]	; (80003d8 <I2C1_ER_IRQHandler+0x10>)
 80003ce:	f000 ff83 	bl	80012d8 <I2C_ER_IRQHandling>
}
 80003d2:	bf00      	nop
 80003d4:	bd80      	pop	{r7, pc}
 80003d6:	bf00      	nop
 80003d8:	2000005c 	.word	0x2000005c

080003dc <I2C_ApplicationEventCallback>:

//Application call back
void I2C_ApplicationEventCallback(I2C_Handle_t *pI2C_Handle, uint8_t AppEv	)
{
 80003dc:	b580      	push	{r7, lr}
 80003de:	b082      	sub	sp, #8
 80003e0:	af00      	add	r7, sp, #0
 80003e2:	6078      	str	r0, [r7, #4]
 80003e4:	460b      	mov	r3, r1
 80003e6:	70fb      	strb	r3, [r7, #3]
	if ( AppEv == I2C_EVENT_TX_CMPLT)
 80003e8:	78fb      	ldrb	r3, [r7, #3]
 80003ea:	2b00      	cmp	r3, #0
 80003ec:	d00e      	beq.n	800040c <I2C_ApplicationEventCallback+0x30>
	{
		;
	}else if ( AppEv == I2C_EVENT_RX_CMPLT)
 80003ee:	78fb      	ldrb	r3, [r7, #3]
 80003f0:	2b01      	cmp	r3, #1
 80003f2:	d00b      	beq.n	800040c <I2C_ApplicationEventCallback+0x30>
	{
		;
	}else if ( AppEv == I2C_ERROR_AF)
 80003f4:	78fb      	ldrb	r3, [r7, #3]
 80003f6:	2b05      	cmp	r3, #5
 80003f8:	d108      	bne.n	800040c <I2C_ApplicationEventCallback+0x30>
	{
		//if the ACK error happens then master don't wait, so close the communication (clear all interrupts)
		I2C_CloseReceiveData(pI2C_Handle);
 80003fa:	6878      	ldr	r0, [r7, #4]
 80003fc:	f000 fdee 	bl	8000fdc <I2C_CloseReceiveData>

		//Generate the stop condition to release the bus
		I2C_GenerateStopCondition(pI2C_Handle->pI2Cx);
 8000400:	687b      	ldr	r3, [r7, #4]
 8000402:	681b      	ldr	r3, [r3, #0]
 8000404:	4618      	mov	r0, r3
 8000406:	f000 fb1c 	bl	8000a42 <I2C_GenerateStopCondition>

		//Suppose the master senddataIT have no ack from slave ,then next line will not be execute (because its uselless )
		//So hang in infinite loop
		while (1);
 800040a:	e7fe      	b.n	800040a <I2C_ApplicationEventCallback+0x2e>

	}

}
 800040c:	bf00      	nop
 800040e:	3708      	adds	r7, #8
 8000410:	46bd      	mov	sp, r7
 8000412:	bd80      	pop	{r7, pc}

08000414 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000414:	480d      	ldr	r0, [pc, #52]	; (800044c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000416:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000418:	480d      	ldr	r0, [pc, #52]	; (8000450 <LoopForever+0x6>)
  ldr r1, =_edata
 800041a:	490e      	ldr	r1, [pc, #56]	; (8000454 <LoopForever+0xa>)
  ldr r2, =_sidata
 800041c:	4a0e      	ldr	r2, [pc, #56]	; (8000458 <LoopForever+0xe>)
  movs r3, #0
 800041e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000420:	e002      	b.n	8000428 <LoopCopyDataInit>

08000422 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000422:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000424:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000426:	3304      	adds	r3, #4

08000428 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000428:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800042a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800042c:	d3f9      	bcc.n	8000422 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800042e:	4a0b      	ldr	r2, [pc, #44]	; (800045c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000430:	4c0b      	ldr	r4, [pc, #44]	; (8000460 <LoopForever+0x16>)
  movs r3, #0
 8000432:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000434:	e001      	b.n	800043a <LoopFillZerobss>

08000436 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000436:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000438:	3204      	adds	r2, #4

0800043a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800043a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800043c:	d3fb      	bcc.n	8000436 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 800043e:	f3af 8000 	nop.w
/* Call static constructors */
  bl __libc_init_array
 8000442:	f000 ffcf 	bl	80013e4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000446:	f7ff ff47 	bl	80002d8 <main>

0800044a <LoopForever>:

LoopForever:
    b LoopForever
 800044a:	e7fe      	b.n	800044a <LoopForever>
  ldr   r0, =_estack
 800044c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000450:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000454:	2000001c 	.word	0x2000001c
  ldr r2, =_sidata
 8000458:	0800144c 	.word	0x0800144c
  ldr r2, =_sbss
 800045c:	2000001c 	.word	0x2000001c
  ldr r4, =_ebss
 8000460:	2000007c 	.word	0x2000007c

08000464 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000464:	e7fe      	b.n	8000464 <ADC_IRQHandler>
	...

08000468 <GPIO_PeriClockControl>:
  *
  *	@Note				- none

*/

void GPIO_PeriClockControl(GPIO_RegDef_t *pGPIOx,uint8_t EnorDI){
 8000468:	b480      	push	{r7}
 800046a:	b083      	sub	sp, #12
 800046c:	af00      	add	r7, sp, #0
 800046e:	6078      	str	r0, [r7, #4]
 8000470:	460b      	mov	r3, r1
 8000472:	70fb      	strb	r3, [r7, #3]

	if(EnorDI == ENABLE){
 8000474:	78fb      	ldrb	r3, [r7, #3]
 8000476:	2b01      	cmp	r3, #1
 8000478:	d157      	bne.n	800052a <GPIO_PeriClockControl+0xc2>
		if(pGPIOx == GPIOA){
 800047a:	687b      	ldr	r3, [r7, #4]
 800047c:	4a59      	ldr	r2, [pc, #356]	; (80005e4 <GPIO_PeriClockControl+0x17c>)
 800047e:	4293      	cmp	r3, r2
 8000480:	d106      	bne.n	8000490 <GPIO_PeriClockControl+0x28>
			GPIOA_PCLK_EN();
 8000482:	4b59      	ldr	r3, [pc, #356]	; (80005e8 <GPIO_PeriClockControl+0x180>)
 8000484:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000486:	4a58      	ldr	r2, [pc, #352]	; (80005e8 <GPIO_PeriClockControl+0x180>)
 8000488:	f043 0301 	orr.w	r3, r3, #1
 800048c:	6313      	str	r3, [r2, #48]	; 0x30
		}
		else if(pGPIOx == GPIOH){
			GPIOH_PCLK_DI();
		}
	}
}
 800048e:	e0a3      	b.n	80005d8 <GPIO_PeriClockControl+0x170>
		else if(pGPIOx == GPIOB){
 8000490:	687b      	ldr	r3, [r7, #4]
 8000492:	4a56      	ldr	r2, [pc, #344]	; (80005ec <GPIO_PeriClockControl+0x184>)
 8000494:	4293      	cmp	r3, r2
 8000496:	d106      	bne.n	80004a6 <GPIO_PeriClockControl+0x3e>
			GPIOB_PCLK_EN();
 8000498:	4b53      	ldr	r3, [pc, #332]	; (80005e8 <GPIO_PeriClockControl+0x180>)
 800049a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800049c:	4a52      	ldr	r2, [pc, #328]	; (80005e8 <GPIO_PeriClockControl+0x180>)
 800049e:	f043 0302 	orr.w	r3, r3, #2
 80004a2:	6313      	str	r3, [r2, #48]	; 0x30
}
 80004a4:	e098      	b.n	80005d8 <GPIO_PeriClockControl+0x170>
		else if(pGPIOx == GPIOC){
 80004a6:	687b      	ldr	r3, [r7, #4]
 80004a8:	4a51      	ldr	r2, [pc, #324]	; (80005f0 <GPIO_PeriClockControl+0x188>)
 80004aa:	4293      	cmp	r3, r2
 80004ac:	d106      	bne.n	80004bc <GPIO_PeriClockControl+0x54>
			GPIOC_PCLK_EN();
 80004ae:	4b4e      	ldr	r3, [pc, #312]	; (80005e8 <GPIO_PeriClockControl+0x180>)
 80004b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004b2:	4a4d      	ldr	r2, [pc, #308]	; (80005e8 <GPIO_PeriClockControl+0x180>)
 80004b4:	f043 0304 	orr.w	r3, r3, #4
 80004b8:	6313      	str	r3, [r2, #48]	; 0x30
}
 80004ba:	e08d      	b.n	80005d8 <GPIO_PeriClockControl+0x170>
		else if(pGPIOx == GPIOD){
 80004bc:	687b      	ldr	r3, [r7, #4]
 80004be:	4a4d      	ldr	r2, [pc, #308]	; (80005f4 <GPIO_PeriClockControl+0x18c>)
 80004c0:	4293      	cmp	r3, r2
 80004c2:	d106      	bne.n	80004d2 <GPIO_PeriClockControl+0x6a>
			GPIOD_PCLK_EN();
 80004c4:	4b48      	ldr	r3, [pc, #288]	; (80005e8 <GPIO_PeriClockControl+0x180>)
 80004c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004c8:	4a47      	ldr	r2, [pc, #284]	; (80005e8 <GPIO_PeriClockControl+0x180>)
 80004ca:	f043 0308 	orr.w	r3, r3, #8
 80004ce:	6313      	str	r3, [r2, #48]	; 0x30
}
 80004d0:	e082      	b.n	80005d8 <GPIO_PeriClockControl+0x170>
		else if(pGPIOx == GPIOE){
 80004d2:	687b      	ldr	r3, [r7, #4]
 80004d4:	4a48      	ldr	r2, [pc, #288]	; (80005f8 <GPIO_PeriClockControl+0x190>)
 80004d6:	4293      	cmp	r3, r2
 80004d8:	d106      	bne.n	80004e8 <GPIO_PeriClockControl+0x80>
			GPIOE_PCLK_EN();
 80004da:	4b43      	ldr	r3, [pc, #268]	; (80005e8 <GPIO_PeriClockControl+0x180>)
 80004dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004de:	4a42      	ldr	r2, [pc, #264]	; (80005e8 <GPIO_PeriClockControl+0x180>)
 80004e0:	f043 0310 	orr.w	r3, r3, #16
 80004e4:	6313      	str	r3, [r2, #48]	; 0x30
}
 80004e6:	e077      	b.n	80005d8 <GPIO_PeriClockControl+0x170>
		else if(pGPIOx == GPIOF){
 80004e8:	687b      	ldr	r3, [r7, #4]
 80004ea:	4a44      	ldr	r2, [pc, #272]	; (80005fc <GPIO_PeriClockControl+0x194>)
 80004ec:	4293      	cmp	r3, r2
 80004ee:	d106      	bne.n	80004fe <GPIO_PeriClockControl+0x96>
			GPIOF_PCLK_EN();
 80004f0:	4b3d      	ldr	r3, [pc, #244]	; (80005e8 <GPIO_PeriClockControl+0x180>)
 80004f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004f4:	4a3c      	ldr	r2, [pc, #240]	; (80005e8 <GPIO_PeriClockControl+0x180>)
 80004f6:	f043 0320 	orr.w	r3, r3, #32
 80004fa:	6313      	str	r3, [r2, #48]	; 0x30
}
 80004fc:	e06c      	b.n	80005d8 <GPIO_PeriClockControl+0x170>
		else if(pGPIOx == GPIOG){
 80004fe:	687b      	ldr	r3, [r7, #4]
 8000500:	4a3f      	ldr	r2, [pc, #252]	; (8000600 <GPIO_PeriClockControl+0x198>)
 8000502:	4293      	cmp	r3, r2
 8000504:	d106      	bne.n	8000514 <GPIO_PeriClockControl+0xac>
			GPIOG_PCLK_EN();
 8000506:	4b38      	ldr	r3, [pc, #224]	; (80005e8 <GPIO_PeriClockControl+0x180>)
 8000508:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800050a:	4a37      	ldr	r2, [pc, #220]	; (80005e8 <GPIO_PeriClockControl+0x180>)
 800050c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000510:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000512:	e061      	b.n	80005d8 <GPIO_PeriClockControl+0x170>
		else if(pGPIOx == GPIOH){
 8000514:	687b      	ldr	r3, [r7, #4]
 8000516:	4a3b      	ldr	r2, [pc, #236]	; (8000604 <GPIO_PeriClockControl+0x19c>)
 8000518:	4293      	cmp	r3, r2
 800051a:	d15d      	bne.n	80005d8 <GPIO_PeriClockControl+0x170>
			GPIOH_PCLK_EN();
 800051c:	4b32      	ldr	r3, [pc, #200]	; (80005e8 <GPIO_PeriClockControl+0x180>)
 800051e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000520:	4a31      	ldr	r2, [pc, #196]	; (80005e8 <GPIO_PeriClockControl+0x180>)
 8000522:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000526:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000528:	e056      	b.n	80005d8 <GPIO_PeriClockControl+0x170>
		if(pGPIOx == GPIOA){
 800052a:	687b      	ldr	r3, [r7, #4]
 800052c:	4a2d      	ldr	r2, [pc, #180]	; (80005e4 <GPIO_PeriClockControl+0x17c>)
 800052e:	4293      	cmp	r3, r2
 8000530:	d106      	bne.n	8000540 <GPIO_PeriClockControl+0xd8>
			GPIOA_PCLK_DI();
 8000532:	4b2d      	ldr	r3, [pc, #180]	; (80005e8 <GPIO_PeriClockControl+0x180>)
 8000534:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000536:	4a2c      	ldr	r2, [pc, #176]	; (80005e8 <GPIO_PeriClockControl+0x180>)
 8000538:	f023 0301 	bic.w	r3, r3, #1
 800053c:	6313      	str	r3, [r2, #48]	; 0x30
}
 800053e:	e04b      	b.n	80005d8 <GPIO_PeriClockControl+0x170>
		else if(pGPIOx == GPIOB){
 8000540:	687b      	ldr	r3, [r7, #4]
 8000542:	4a2a      	ldr	r2, [pc, #168]	; (80005ec <GPIO_PeriClockControl+0x184>)
 8000544:	4293      	cmp	r3, r2
 8000546:	d106      	bne.n	8000556 <GPIO_PeriClockControl+0xee>
			GPIOB_PCLK_DI();
 8000548:	4b27      	ldr	r3, [pc, #156]	; (80005e8 <GPIO_PeriClockControl+0x180>)
 800054a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800054c:	4a26      	ldr	r2, [pc, #152]	; (80005e8 <GPIO_PeriClockControl+0x180>)
 800054e:	f023 0302 	bic.w	r3, r3, #2
 8000552:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000554:	e040      	b.n	80005d8 <GPIO_PeriClockControl+0x170>
		else if(pGPIOx == GPIOC){
 8000556:	687b      	ldr	r3, [r7, #4]
 8000558:	4a25      	ldr	r2, [pc, #148]	; (80005f0 <GPIO_PeriClockControl+0x188>)
 800055a:	4293      	cmp	r3, r2
 800055c:	d106      	bne.n	800056c <GPIO_PeriClockControl+0x104>
			GPIOC_PCLK_DI();
 800055e:	4b22      	ldr	r3, [pc, #136]	; (80005e8 <GPIO_PeriClockControl+0x180>)
 8000560:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000562:	4a21      	ldr	r2, [pc, #132]	; (80005e8 <GPIO_PeriClockControl+0x180>)
 8000564:	f023 0304 	bic.w	r3, r3, #4
 8000568:	6313      	str	r3, [r2, #48]	; 0x30
}
 800056a:	e035      	b.n	80005d8 <GPIO_PeriClockControl+0x170>
		else if(pGPIOx == GPIOD){
 800056c:	687b      	ldr	r3, [r7, #4]
 800056e:	4a21      	ldr	r2, [pc, #132]	; (80005f4 <GPIO_PeriClockControl+0x18c>)
 8000570:	4293      	cmp	r3, r2
 8000572:	d106      	bne.n	8000582 <GPIO_PeriClockControl+0x11a>
			GPIOD_PCLK_DI();
 8000574:	4b1c      	ldr	r3, [pc, #112]	; (80005e8 <GPIO_PeriClockControl+0x180>)
 8000576:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000578:	4a1b      	ldr	r2, [pc, #108]	; (80005e8 <GPIO_PeriClockControl+0x180>)
 800057a:	f023 0308 	bic.w	r3, r3, #8
 800057e:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000580:	e02a      	b.n	80005d8 <GPIO_PeriClockControl+0x170>
		else if(pGPIOx == GPIOE){
 8000582:	687b      	ldr	r3, [r7, #4]
 8000584:	4a1c      	ldr	r2, [pc, #112]	; (80005f8 <GPIO_PeriClockControl+0x190>)
 8000586:	4293      	cmp	r3, r2
 8000588:	d106      	bne.n	8000598 <GPIO_PeriClockControl+0x130>
			GPIOE_PCLK_DI();
 800058a:	4b17      	ldr	r3, [pc, #92]	; (80005e8 <GPIO_PeriClockControl+0x180>)
 800058c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800058e:	4a16      	ldr	r2, [pc, #88]	; (80005e8 <GPIO_PeriClockControl+0x180>)
 8000590:	f023 0310 	bic.w	r3, r3, #16
 8000594:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000596:	e01f      	b.n	80005d8 <GPIO_PeriClockControl+0x170>
		else if(pGPIOx == GPIOF){
 8000598:	687b      	ldr	r3, [r7, #4]
 800059a:	4a18      	ldr	r2, [pc, #96]	; (80005fc <GPIO_PeriClockControl+0x194>)
 800059c:	4293      	cmp	r3, r2
 800059e:	d106      	bne.n	80005ae <GPIO_PeriClockControl+0x146>
			GPIOF_PCLK_DI();
 80005a0:	4b11      	ldr	r3, [pc, #68]	; (80005e8 <GPIO_PeriClockControl+0x180>)
 80005a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005a4:	4a10      	ldr	r2, [pc, #64]	; (80005e8 <GPIO_PeriClockControl+0x180>)
 80005a6:	f023 0320 	bic.w	r3, r3, #32
 80005aa:	6313      	str	r3, [r2, #48]	; 0x30
}
 80005ac:	e014      	b.n	80005d8 <GPIO_PeriClockControl+0x170>
		else if(pGPIOx == GPIOG){
 80005ae:	687b      	ldr	r3, [r7, #4]
 80005b0:	4a13      	ldr	r2, [pc, #76]	; (8000600 <GPIO_PeriClockControl+0x198>)
 80005b2:	4293      	cmp	r3, r2
 80005b4:	d106      	bne.n	80005c4 <GPIO_PeriClockControl+0x15c>
			GPIOG_PCLK_DI();
 80005b6:	4b0c      	ldr	r3, [pc, #48]	; (80005e8 <GPIO_PeriClockControl+0x180>)
 80005b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ba:	4a0b      	ldr	r2, [pc, #44]	; (80005e8 <GPIO_PeriClockControl+0x180>)
 80005bc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80005c0:	6313      	str	r3, [r2, #48]	; 0x30
}
 80005c2:	e009      	b.n	80005d8 <GPIO_PeriClockControl+0x170>
		else if(pGPIOx == GPIOH){
 80005c4:	687b      	ldr	r3, [r7, #4]
 80005c6:	4a0f      	ldr	r2, [pc, #60]	; (8000604 <GPIO_PeriClockControl+0x19c>)
 80005c8:	4293      	cmp	r3, r2
 80005ca:	d105      	bne.n	80005d8 <GPIO_PeriClockControl+0x170>
			GPIOH_PCLK_DI();
 80005cc:	4b06      	ldr	r3, [pc, #24]	; (80005e8 <GPIO_PeriClockControl+0x180>)
 80005ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005d0:	4a05      	ldr	r2, [pc, #20]	; (80005e8 <GPIO_PeriClockControl+0x180>)
 80005d2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80005d6:	6313      	str	r3, [r2, #48]	; 0x30
}
 80005d8:	bf00      	nop
 80005da:	370c      	adds	r7, #12
 80005dc:	46bd      	mov	sp, r7
 80005de:	bc80      	pop	{r7}
 80005e0:	4770      	bx	lr
 80005e2:	bf00      	nop
 80005e4:	40020000 	.word	0x40020000
 80005e8:	40023800 	.word	0x40023800
 80005ec:	40020400 	.word	0x40020400
 80005f0:	40020800 	.word	0x40020800
 80005f4:	40020c00 	.word	0x40020c00
 80005f8:	40021000 	.word	0x40021000
 80005fc:	40021400 	.word	0x40021400
 8000600:	40021800 	.word	0x40021800
 8000604:	40021c00 	.word	0x40021c00

08000608 <GPIO_Init>:
  *
  *	@Note				- none

*/
void GPIO_Init(GPIO_Handle_t *pGPIOHandle)
{
 8000608:	b580      	push	{r7, lr}
 800060a:	b086      	sub	sp, #24
 800060c:	af00      	add	r7, sp, #0
 800060e:	6078      	str	r0, [r7, #4]
     GPIO_PeriClockControl(pGPIOHandle->pGPIOx, ENABLE);
 8000610:	687b      	ldr	r3, [r7, #4]
 8000612:	681b      	ldr	r3, [r3, #0]
 8000614:	2101      	movs	r1, #1
 8000616:	4618      	mov	r0, r3
 8000618:	f7ff ff26 	bl	8000468 <GPIO_PeriClockControl>
	uint32_t temp =0; 			//Take a temporvary variable
 800061c:	2300      	movs	r3, #0
 800061e:	617b      	str	r3, [r7, #20]

	//1) Configure the mode of GPIO Pin(<=3(analog mode macros is called non-interrupt mode)

	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_ANALOG )
 8000620:	687b      	ldr	r3, [r7, #4]
 8000622:	795b      	ldrb	r3, [r3, #5]
 8000624:	2b03      	cmp	r3, #3
 8000626:	d821      	bhi.n	800066c <GPIO_Init+0x64>
	{
		//Non interrupt Mode

		temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode << (2* pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); //multi 2 is because each register takes 2 bits to config.
 8000628:	687b      	ldr	r3, [r7, #4]
 800062a:	795b      	ldrb	r3, [r3, #5]
 800062c:	461a      	mov	r2, r3
 800062e:	687b      	ldr	r3, [r7, #4]
 8000630:	791b      	ldrb	r3, [r3, #4]
 8000632:	005b      	lsls	r3, r3, #1
 8000634:	fa02 f303 	lsl.w	r3, r2, r3
 8000638:	617b      	str	r3, [r7, #20]
		pGPIOHandle->pGPIOx->MODER &= ~(0x3 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);						  //Clearing the bit at specific bitfields.
 800063a:	687b      	ldr	r3, [r7, #4]
 800063c:	681b      	ldr	r3, [r3, #0]
 800063e:	681a      	ldr	r2, [r3, #0]
 8000640:	687b      	ldr	r3, [r7, #4]
 8000642:	791b      	ldrb	r3, [r3, #4]
 8000644:	4619      	mov	r1, r3
 8000646:	2303      	movs	r3, #3
 8000648:	408b      	lsls	r3, r1
 800064a:	43db      	mvns	r3, r3
 800064c:	4619      	mov	r1, r3
 800064e:	687b      	ldr	r3, [r7, #4]
 8000650:	681b      	ldr	r3, [r3, #0]
 8000652:	400a      	ands	r2, r1
 8000654:	601a      	str	r2, [r3, #0]
		pGPIOHandle->pGPIOx->MODER |= temp;
 8000656:	687b      	ldr	r3, [r7, #4]
 8000658:	681b      	ldr	r3, [r3, #0]
 800065a:	6819      	ldr	r1, [r3, #0]
 800065c:	687b      	ldr	r3, [r7, #4]
 800065e:	681b      	ldr	r3, [r3, #0]
 8000660:	697a      	ldr	r2, [r7, #20]
 8000662:	430a      	orrs	r2, r1
 8000664:	601a      	str	r2, [r3, #0]
		temp =0;
 8000666:	2300      	movs	r3, #0
 8000668:	617b      	str	r3, [r7, #20]
 800066a:	e0bc      	b.n	80007e6 <GPIO_Init+0x1de>

	else
	{

		//greater than 3 is called interrupt Mode
		if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_IT_FT){
 800066c:	687b      	ldr	r3, [r7, #4]
 800066e:	795b      	ldrb	r3, [r3, #5]
 8000670:	2b04      	cmp	r3, #4
 8000672:	d117      	bne.n	80006a4 <GPIO_Init+0x9c>
			//1. Configure FTSR register
			EXTI->FTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000674:	4b46      	ldr	r3, [pc, #280]	; (8000790 <GPIO_Init+0x188>)
 8000676:	68db      	ldr	r3, [r3, #12]
 8000678:	687a      	ldr	r2, [r7, #4]
 800067a:	7912      	ldrb	r2, [r2, #4]
 800067c:	4611      	mov	r1, r2
 800067e:	2201      	movs	r2, #1
 8000680:	408a      	lsls	r2, r1
 8000682:	4611      	mov	r1, r2
 8000684:	4a42      	ldr	r2, [pc, #264]	; (8000790 <GPIO_Init+0x188>)
 8000686:	430b      	orrs	r3, r1
 8000688:	60d3      	str	r3, [r2, #12]
			EXTI->RTSR &= ~(1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800068a:	4b41      	ldr	r3, [pc, #260]	; (8000790 <GPIO_Init+0x188>)
 800068c:	689b      	ldr	r3, [r3, #8]
 800068e:	687a      	ldr	r2, [r7, #4]
 8000690:	7912      	ldrb	r2, [r2, #4]
 8000692:	4611      	mov	r1, r2
 8000694:	2201      	movs	r2, #1
 8000696:	408a      	lsls	r2, r1
 8000698:	43d2      	mvns	r2, r2
 800069a:	4611      	mov	r1, r2
 800069c:	4a3c      	ldr	r2, [pc, #240]	; (8000790 <GPIO_Init+0x188>)
 800069e:	400b      	ands	r3, r1
 80006a0:	6093      	str	r3, [r2, #8]
 80006a2:	e035      	b.n	8000710 <GPIO_Init+0x108>


		}else if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_IT_RT){
 80006a4:	687b      	ldr	r3, [r7, #4]
 80006a6:	795b      	ldrb	r3, [r3, #5]
 80006a8:	2b05      	cmp	r3, #5
 80006aa:	d117      	bne.n	80006dc <GPIO_Init+0xd4>
			//1. Configure the RTSR Register
			EXTI->RTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80006ac:	4b38      	ldr	r3, [pc, #224]	; (8000790 <GPIO_Init+0x188>)
 80006ae:	689b      	ldr	r3, [r3, #8]
 80006b0:	687a      	ldr	r2, [r7, #4]
 80006b2:	7912      	ldrb	r2, [r2, #4]
 80006b4:	4611      	mov	r1, r2
 80006b6:	2201      	movs	r2, #1
 80006b8:	408a      	lsls	r2, r1
 80006ba:	4611      	mov	r1, r2
 80006bc:	4a34      	ldr	r2, [pc, #208]	; (8000790 <GPIO_Init+0x188>)
 80006be:	430b      	orrs	r3, r1
 80006c0:	6093      	str	r3, [r2, #8]
			EXTI->FTSR &= ~(1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80006c2:	4b33      	ldr	r3, [pc, #204]	; (8000790 <GPIO_Init+0x188>)
 80006c4:	68db      	ldr	r3, [r3, #12]
 80006c6:	687a      	ldr	r2, [r7, #4]
 80006c8:	7912      	ldrb	r2, [r2, #4]
 80006ca:	4611      	mov	r1, r2
 80006cc:	2201      	movs	r2, #1
 80006ce:	408a      	lsls	r2, r1
 80006d0:	43d2      	mvns	r2, r2
 80006d2:	4611      	mov	r1, r2
 80006d4:	4a2e      	ldr	r2, [pc, #184]	; (8000790 <GPIO_Init+0x188>)
 80006d6:	400b      	ands	r3, r1
 80006d8:	60d3      	str	r3, [r2, #12]
 80006da:	e019      	b.n	8000710 <GPIO_Init+0x108>



		}else if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_IT_RFT ){
 80006dc:	687b      	ldr	r3, [r7, #4]
 80006de:	795b      	ldrb	r3, [r3, #5]
 80006e0:	2b06      	cmp	r3, #6
 80006e2:	d115      	bne.n	8000710 <GPIO_Init+0x108>
			//1. Configure the Both RTS AND FTSR
			EXTI->FTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80006e4:	4b2a      	ldr	r3, [pc, #168]	; (8000790 <GPIO_Init+0x188>)
 80006e6:	68db      	ldr	r3, [r3, #12]
 80006e8:	687a      	ldr	r2, [r7, #4]
 80006ea:	7912      	ldrb	r2, [r2, #4]
 80006ec:	4611      	mov	r1, r2
 80006ee:	2201      	movs	r2, #1
 80006f0:	408a      	lsls	r2, r1
 80006f2:	4611      	mov	r1, r2
 80006f4:	4a26      	ldr	r2, [pc, #152]	; (8000790 <GPIO_Init+0x188>)
 80006f6:	430b      	orrs	r3, r1
 80006f8:	60d3      	str	r3, [r2, #12]
			EXTI->RTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80006fa:	4b25      	ldr	r3, [pc, #148]	; (8000790 <GPIO_Init+0x188>)
 80006fc:	689b      	ldr	r3, [r3, #8]
 80006fe:	687a      	ldr	r2, [r7, #4]
 8000700:	7912      	ldrb	r2, [r2, #4]
 8000702:	4611      	mov	r1, r2
 8000704:	2201      	movs	r2, #1
 8000706:	408a      	lsls	r2, r1
 8000708:	4611      	mov	r1, r2
 800070a:	4a21      	ldr	r2, [pc, #132]	; (8000790 <GPIO_Init+0x188>)
 800070c:	430b      	orrs	r3, r1
 800070e:	6093      	str	r3, [r2, #8]
		}


		//2. Configure the GPIO Port Selection in SYSCFG_Register

		uint8_t temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 4;			// pinnumber/4 (because 4 registers)
 8000710:	687b      	ldr	r3, [r7, #4]
 8000712:	791b      	ldrb	r3, [r3, #4]
 8000714:	089b      	lsrs	r3, r3, #2
 8000716:	74fb      	strb	r3, [r7, #19]
		uint8_t temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 4;
 8000718:	687b      	ldr	r3, [r7, #4]
 800071a:	791b      	ldrb	r3, [r3, #4]
 800071c:	f003 0303 	and.w	r3, r3, #3
 8000720:	74bb      	strb	r3, [r7, #18]
		SYSCFG_PCLK_EN();														// clock enable
 8000722:	4b1c      	ldr	r3, [pc, #112]	; (8000794 <GPIO_Init+0x18c>)
 8000724:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000726:	4a1b      	ldr	r2, [pc, #108]	; (8000794 <GPIO_Init+0x18c>)
 8000728:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800072c:	6453      	str	r3, [r2, #68]	; 0x44
		uint8_t portcode = GPIO_BASEADDR_TO_PORTCODE (pGPIOHandle->pGPIOx);		// macro
 800072e:	687b      	ldr	r3, [r7, #4]
 8000730:	681b      	ldr	r3, [r3, #0]
 8000732:	4a19      	ldr	r2, [pc, #100]	; (8000798 <GPIO_Init+0x190>)
 8000734:	4293      	cmp	r3, r2
 8000736:	d03f      	beq.n	80007b8 <GPIO_Init+0x1b0>
 8000738:	687b      	ldr	r3, [r7, #4]
 800073a:	681b      	ldr	r3, [r3, #0]
 800073c:	4a17      	ldr	r2, [pc, #92]	; (800079c <GPIO_Init+0x194>)
 800073e:	4293      	cmp	r3, r2
 8000740:	d024      	beq.n	800078c <GPIO_Init+0x184>
 8000742:	687b      	ldr	r3, [r7, #4]
 8000744:	681b      	ldr	r3, [r3, #0]
 8000746:	4a16      	ldr	r2, [pc, #88]	; (80007a0 <GPIO_Init+0x198>)
 8000748:	4293      	cmp	r3, r2
 800074a:	d01d      	beq.n	8000788 <GPIO_Init+0x180>
 800074c:	687b      	ldr	r3, [r7, #4]
 800074e:	681b      	ldr	r3, [r3, #0]
 8000750:	4a14      	ldr	r2, [pc, #80]	; (80007a4 <GPIO_Init+0x19c>)
 8000752:	4293      	cmp	r3, r2
 8000754:	d013      	beq.n	800077e <GPIO_Init+0x176>
 8000756:	687b      	ldr	r3, [r7, #4]
 8000758:	681b      	ldr	r3, [r3, #0]
 800075a:	4a13      	ldr	r2, [pc, #76]	; (80007a8 <GPIO_Init+0x1a0>)
 800075c:	4293      	cmp	r3, r2
 800075e:	d00e      	beq.n	800077e <GPIO_Init+0x176>
 8000760:	687b      	ldr	r3, [r7, #4]
 8000762:	681b      	ldr	r3, [r3, #0]
 8000764:	4a11      	ldr	r2, [pc, #68]	; (80007ac <GPIO_Init+0x1a4>)
 8000766:	4293      	cmp	r3, r2
 8000768:	d009      	beq.n	800077e <GPIO_Init+0x176>
 800076a:	687b      	ldr	r3, [r7, #4]
 800076c:	681b      	ldr	r3, [r3, #0]
 800076e:	4a10      	ldr	r2, [pc, #64]	; (80007b0 <GPIO_Init+0x1a8>)
 8000770:	4293      	cmp	r3, r2
 8000772:	d004      	beq.n	800077e <GPIO_Init+0x176>
 8000774:	687b      	ldr	r3, [r7, #4]
 8000776:	681b      	ldr	r3, [r3, #0]
 8000778:	4a0e      	ldr	r2, [pc, #56]	; (80007b4 <GPIO_Init+0x1ac>)
 800077a:	4293      	cmp	r3, r2
 800077c:	d101      	bne.n	8000782 <GPIO_Init+0x17a>
 800077e:	2301      	movs	r3, #1
 8000780:	e000      	b.n	8000784 <GPIO_Init+0x17c>
 8000782:	2300      	movs	r3, #0
 8000784:	b2db      	uxtb	r3, r3
 8000786:	e018      	b.n	80007ba <GPIO_Init+0x1b2>
 8000788:	2302      	movs	r3, #2
 800078a:	e016      	b.n	80007ba <GPIO_Init+0x1b2>
 800078c:	2301      	movs	r3, #1
 800078e:	e014      	b.n	80007ba <GPIO_Init+0x1b2>
 8000790:	40013c00 	.word	0x40013c00
 8000794:	40023800 	.word	0x40023800
 8000798:	40020000 	.word	0x40020000
 800079c:	40020400 	.word	0x40020400
 80007a0:	40020800 	.word	0x40020800
 80007a4:	40020c00 	.word	0x40020c00
 80007a8:	40021000 	.word	0x40021000
 80007ac:	40021400 	.word	0x40021400
 80007b0:	40021800 	.word	0x40021800
 80007b4:	40021c00 	.word	0x40021c00
 80007b8:	2300      	movs	r3, #0
 80007ba:	747b      	strb	r3, [r7, #17]

		SYSCFG->EXTICR[temp1] = portcode << (temp2 *4);
 80007bc:	7c7a      	ldrb	r2, [r7, #17]
 80007be:	7cbb      	ldrb	r3, [r7, #18]
 80007c0:	009b      	lsls	r3, r3, #2
 80007c2:	fa02 f103 	lsl.w	r1, r2, r3
 80007c6:	4a5a      	ldr	r2, [pc, #360]	; (8000930 <GPIO_Init+0x328>)
 80007c8:	7cfb      	ldrb	r3, [r7, #19]
 80007ca:	3302      	adds	r3, #2
 80007cc:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

		//3. Enable interrupt Delivery using IMR (Interrupt Mask Register)
		EXTI->IMR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80007d0:	4b58      	ldr	r3, [pc, #352]	; (8000934 <GPIO_Init+0x32c>)
 80007d2:	681b      	ldr	r3, [r3, #0]
 80007d4:	687a      	ldr	r2, [r7, #4]
 80007d6:	7912      	ldrb	r2, [r2, #4]
 80007d8:	4611      	mov	r1, r2
 80007da:	2201      	movs	r2, #1
 80007dc:	408a      	lsls	r2, r1
 80007de:	4611      	mov	r1, r2
 80007e0:	4a54      	ldr	r2, [pc, #336]	; (8000934 <GPIO_Init+0x32c>)
 80007e2:	430b      	orrs	r3, r1
 80007e4:	6013      	str	r3, [r2, #0]


	}

	//2) Configure the speed
	temp = 0;
 80007e6:	2300      	movs	r3, #0
 80007e8:	617b      	str	r3, [r7, #20]

	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinSpeed << (2* pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 80007ea:	687b      	ldr	r3, [r7, #4]
 80007ec:	799b      	ldrb	r3, [r3, #6]
 80007ee:	461a      	mov	r2, r3
 80007f0:	687b      	ldr	r3, [r7, #4]
 80007f2:	791b      	ldrb	r3, [r3, #4]
 80007f4:	005b      	lsls	r3, r3, #1
 80007f6:	fa02 f303 	lsl.w	r3, r2, r3
 80007fa:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->OSPEEDER &= ~(0x3 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber); // Clearing the Bit
 80007fc:	687b      	ldr	r3, [r7, #4]
 80007fe:	681b      	ldr	r3, [r3, #0]
 8000800:	689a      	ldr	r2, [r3, #8]
 8000802:	687b      	ldr	r3, [r7, #4]
 8000804:	791b      	ldrb	r3, [r3, #4]
 8000806:	4619      	mov	r1, r3
 8000808:	2303      	movs	r3, #3
 800080a:	408b      	lsls	r3, r1
 800080c:	43db      	mvns	r3, r3
 800080e:	4619      	mov	r1, r3
 8000810:	687b      	ldr	r3, [r7, #4]
 8000812:	681b      	ldr	r3, [r3, #0]
 8000814:	400a      	ands	r2, r1
 8000816:	609a      	str	r2, [r3, #8]
	pGPIOHandle->pGPIOx->OSPEEDER |= temp;
 8000818:	687b      	ldr	r3, [r7, #4]
 800081a:	681b      	ldr	r3, [r3, #0]
 800081c:	6899      	ldr	r1, [r3, #8]
 800081e:	687b      	ldr	r3, [r7, #4]
 8000820:	681b      	ldr	r3, [r3, #0]
 8000822:	697a      	ldr	r2, [r7, #20]
 8000824:	430a      	orrs	r2, r1
 8000826:	609a      	str	r2, [r3, #8]
	temp = 0;
 8000828:	2300      	movs	r3, #0
 800082a:	617b      	str	r3, [r7, #20]


	//3) Configure the Pullup/PullDown
	temp = 0;
 800082c:	2300      	movs	r3, #0
 800082e:	617b      	str	r3, [r7, #20]
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinPuPdControl << (2* pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000830:	687b      	ldr	r3, [r7, #4]
 8000832:	79db      	ldrb	r3, [r3, #7]
 8000834:	461a      	mov	r2, r3
 8000836:	687b      	ldr	r3, [r7, #4]
 8000838:	791b      	ldrb	r3, [r3, #4]
 800083a:	005b      	lsls	r3, r3, #1
 800083c:	fa02 f303 	lsl.w	r3, r2, r3
 8000840:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->PUPDR &= ~(0x3 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000842:	687b      	ldr	r3, [r7, #4]
 8000844:	681b      	ldr	r3, [r3, #0]
 8000846:	68da      	ldr	r2, [r3, #12]
 8000848:	687b      	ldr	r3, [r7, #4]
 800084a:	791b      	ldrb	r3, [r3, #4]
 800084c:	4619      	mov	r1, r3
 800084e:	2303      	movs	r3, #3
 8000850:	408b      	lsls	r3, r1
 8000852:	43db      	mvns	r3, r3
 8000854:	4619      	mov	r1, r3
 8000856:	687b      	ldr	r3, [r7, #4]
 8000858:	681b      	ldr	r3, [r3, #0]
 800085a:	400a      	ands	r2, r1
 800085c:	60da      	str	r2, [r3, #12]
	pGPIOHandle->pGPIOx->PUPDR |= temp;
 800085e:	687b      	ldr	r3, [r7, #4]
 8000860:	681b      	ldr	r3, [r3, #0]
 8000862:	68d9      	ldr	r1, [r3, #12]
 8000864:	687b      	ldr	r3, [r7, #4]
 8000866:	681b      	ldr	r3, [r3, #0]
 8000868:	697a      	ldr	r2, [r7, #20]
 800086a:	430a      	orrs	r2, r1
 800086c:	60da      	str	r2, [r3, #12]
	temp = 0;
 800086e:	2300      	movs	r3, #0
 8000870:	617b      	str	r3, [r7, #20]

	//4) Configure the Optype
	temp = 0;
 8000872:	2300      	movs	r3, #0
 8000874:	617b      	str	r3, [r7, #20]
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinOPType << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber );
 8000876:	687b      	ldr	r3, [r7, #4]
 8000878:	7a1b      	ldrb	r3, [r3, #8]
 800087a:	461a      	mov	r2, r3
 800087c:	687b      	ldr	r3, [r7, #4]
 800087e:	791b      	ldrb	r3, [r3, #4]
 8000880:	fa02 f303 	lsl.w	r3, r2, r3
 8000884:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->OTYPER &= ~(0x1 <<pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000886:	687b      	ldr	r3, [r7, #4]
 8000888:	681b      	ldr	r3, [r3, #0]
 800088a:	685a      	ldr	r2, [r3, #4]
 800088c:	687b      	ldr	r3, [r7, #4]
 800088e:	791b      	ldrb	r3, [r3, #4]
 8000890:	4619      	mov	r1, r3
 8000892:	2301      	movs	r3, #1
 8000894:	408b      	lsls	r3, r1
 8000896:	43db      	mvns	r3, r3
 8000898:	4619      	mov	r1, r3
 800089a:	687b      	ldr	r3, [r7, #4]
 800089c:	681b      	ldr	r3, [r3, #0]
 800089e:	400a      	ands	r2, r1
 80008a0:	605a      	str	r2, [r3, #4]
	pGPIOHandle->pGPIOx->OTYPER |= temp;
 80008a2:	687b      	ldr	r3, [r7, #4]
 80008a4:	681b      	ldr	r3, [r3, #0]
 80008a6:	6859      	ldr	r1, [r3, #4]
 80008a8:	687b      	ldr	r3, [r7, #4]
 80008aa:	681b      	ldr	r3, [r3, #0]
 80008ac:	697a      	ldr	r2, [r7, #20]
 80008ae:	430a      	orrs	r2, r1
 80008b0:	605a      	str	r2, [r3, #4]
	temp =0;
 80008b2:	2300      	movs	r3, #0
 80008b4:	617b      	str	r3, [r7, #20]

	//5) Configure Alternate function register
	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_ALTFN)
 80008b6:	687b      	ldr	r3, [r7, #4]
 80008b8:	795b      	ldrb	r3, [r3, #5]
 80008ba:	2b02      	cmp	r3, #2
 80008bc:	d133      	bne.n	8000926 <GPIO_Init+0x31e>
	{
		//configure the alternate function
		// Creating the Two variables

		uint8_t temp1,temp2 = 0;
 80008be:	2300      	movs	r3, #0
 80008c0:	743b      	strb	r3, [r7, #16]

		temp1= (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 8);
 80008c2:	687b      	ldr	r3, [r7, #4]
 80008c4:	791b      	ldrb	r3, [r3, #4]
 80008c6:	08db      	lsrs	r3, r3, #3
 80008c8:	73fb      	strb	r3, [r7, #15]
		temp2= (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 8);
 80008ca:	687b      	ldr	r3, [r7, #4]
 80008cc:	791b      	ldrb	r3, [r3, #4]
 80008ce:	f003 0307 	and.w	r3, r3, #7
 80008d2:	743b      	strb	r3, [r7, #16]

		pGPIOHandle->pGPIOx->AFR[temp1] &= ~ (0xF << (4*temp2));
 80008d4:	687b      	ldr	r3, [r7, #4]
 80008d6:	681b      	ldr	r3, [r3, #0]
 80008d8:	7bfa      	ldrb	r2, [r7, #15]
 80008da:	3208      	adds	r2, #8
 80008dc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80008e0:	7c3b      	ldrb	r3, [r7, #16]
 80008e2:	009b      	lsls	r3, r3, #2
 80008e4:	220f      	movs	r2, #15
 80008e6:	fa02 f303 	lsl.w	r3, r2, r3
 80008ea:	43db      	mvns	r3, r3
 80008ec:	4618      	mov	r0, r3
 80008ee:	687b      	ldr	r3, [r7, #4]
 80008f0:	681b      	ldr	r3, [r3, #0]
 80008f2:	7bfa      	ldrb	r2, [r7, #15]
 80008f4:	4001      	ands	r1, r0
 80008f6:	3208      	adds	r2, #8
 80008f8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		pGPIOHandle->pGPIOx->AFR[temp1] |= ( pGPIOHandle->GPIO_PinConfig.GPIO_PinAltFunMode << (4* temp2) ) ;
 80008fc:	687b      	ldr	r3, [r7, #4]
 80008fe:	681b      	ldr	r3, [r3, #0]
 8000900:	7bfa      	ldrb	r2, [r7, #15]
 8000902:	3208      	adds	r2, #8
 8000904:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8000908:	687b      	ldr	r3, [r7, #4]
 800090a:	7a5b      	ldrb	r3, [r3, #9]
 800090c:	461a      	mov	r2, r3
 800090e:	7c3b      	ldrb	r3, [r7, #16]
 8000910:	009b      	lsls	r3, r3, #2
 8000912:	fa02 f303 	lsl.w	r3, r2, r3
 8000916:	4618      	mov	r0, r3
 8000918:	687b      	ldr	r3, [r7, #4]
 800091a:	681b      	ldr	r3, [r3, #0]
 800091c:	7bfa      	ldrb	r2, [r7, #15]
 800091e:	4301      	orrs	r1, r0
 8000920:	3208      	adds	r2, #8
 8000922:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

	}


	}
 8000926:	bf00      	nop
 8000928:	3718      	adds	r7, #24
 800092a:	46bd      	mov	sp, r7
 800092c:	bd80      	pop	{r7, pc}
 800092e:	bf00      	nop
 8000930:	40013800 	.word	0x40013800
 8000934:	40013c00 	.word	0x40013c00

08000938 <GPIO_ReadFromInputPin>:
  *	@Note				- none

*/

uint8_t  GPIO_ReadFromInputPin(GPIO_RegDef_t *pGPIOx,uint8_t PinNumber)				//ReadFrom input Pin(Base address of the GPIO and Pin Number(pin state is 1 or 0 so ;uint8_t)
{
 8000938:	b480      	push	{r7}
 800093a:	b085      	sub	sp, #20
 800093c:	af00      	add	r7, sp, #0
 800093e:	6078      	str	r0, [r7, #4]
 8000940:	460b      	mov	r3, r1
 8000942:	70fb      	strb	r3, [r7, #3]
	uint8_t value;
	value = (uint8_t )((pGPIOx->IDR >> PinNumber) & 00000001);							//IDR register left shifted by pin number and masked to read particular bit field.
 8000944:	687b      	ldr	r3, [r7, #4]
 8000946:	691a      	ldr	r2, [r3, #16]
 8000948:	78fb      	ldrb	r3, [r7, #3]
 800094a:	fa22 f303 	lsr.w	r3, r2, r3
 800094e:	b2db      	uxtb	r3, r3
 8000950:	f003 0301 	and.w	r3, r3, #1
 8000954:	73fb      	strb	r3, [r7, #15]
	return value;
 8000956:	7bfb      	ldrb	r3, [r7, #15]

}
 8000958:	4618      	mov	r0, r3
 800095a:	3714      	adds	r7, #20
 800095c:	46bd      	mov	sp, r7
 800095e:	bc80      	pop	{r7}
 8000960:	4770      	bx	lr

08000962 <I2C_GenerateStartCondition>:
static void I2C_MasterHandlerRxNEInterrupt(I2C_Handle_t *pI2C_Handle);


/*********************************************************Helper Functions***************************************/
void I2C_GenerateStartCondition(I2C_RegDef_t *pI2Cx)
{
 8000962:	b480      	push	{r7}
 8000964:	b083      	sub	sp, #12
 8000966:	af00      	add	r7, sp, #0
 8000968:	6078      	str	r0, [r7, #4]
	pI2Cx->I2C_CR1 |= ( 1 << I2C_CR1_START);
 800096a:	687b      	ldr	r3, [r7, #4]
 800096c:	681b      	ldr	r3, [r3, #0]
 800096e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000972:	687b      	ldr	r3, [r7, #4]
 8000974:	601a      	str	r2, [r3, #0]
}
 8000976:	bf00      	nop
 8000978:	370c      	adds	r7, #12
 800097a:	46bd      	mov	sp, r7
 800097c:	bc80      	pop	{r7}
 800097e:	4770      	bx	lr

08000980 <I2C_ExecuteAddressPhaseWrite>:

static void I2C_ExecuteAddressPhaseWrite(I2C_RegDef_t *pI2Cx, uint8_t SlaveAddr)
{
 8000980:	b480      	push	{r7}
 8000982:	b083      	sub	sp, #12
 8000984:	af00      	add	r7, sp, #0
 8000986:	6078      	str	r0, [r7, #4]
 8000988:	460b      	mov	r3, r1
 800098a:	70fb      	strb	r3, [r7, #3]
	//shift register by 1 , to fill r/w bit
	SlaveAddr = SlaveAddr << 1 ;
 800098c:	78fb      	ldrb	r3, [r7, #3]
 800098e:	005b      	lsls	r3, r3, #1
 8000990:	70fb      	strb	r3, [r7, #3]
	SlaveAddr &= ~(1);							//To clear the first bit (Slave address + r/w bit ) W=0;
 8000992:	78fb      	ldrb	r3, [r7, #3]
 8000994:	f023 0301 	bic.w	r3, r3, #1
 8000998:	70fb      	strb	r3, [r7, #3]
	//put into Data buffer
	pI2Cx->DR = SlaveAddr;
 800099a:	78fa      	ldrb	r2, [r7, #3]
 800099c:	687b      	ldr	r3, [r7, #4]
 800099e:	611a      	str	r2, [r3, #16]
}
 80009a0:	bf00      	nop
 80009a2:	370c      	adds	r7, #12
 80009a4:	46bd      	mov	sp, r7
 80009a6:	bc80      	pop	{r7}
 80009a8:	4770      	bx	lr

080009aa <I2C_ExecuteAddressPhaseRead>:

static void I2C_ExecuteAddressPhaseRead(I2C_RegDef_t *pI2Cx, uint8_t SlaveAddr)
{
 80009aa:	b480      	push	{r7}
 80009ac:	b083      	sub	sp, #12
 80009ae:	af00      	add	r7, sp, #0
 80009b0:	6078      	str	r0, [r7, #4]
 80009b2:	460b      	mov	r3, r1
 80009b4:	70fb      	strb	r3, [r7, #3]
	//Shift the register by 1, to fill R/W bit
	SlaveAddr = SlaveAddr <<1;
 80009b6:	78fb      	ldrb	r3, [r7, #3]
 80009b8:	005b      	lsls	r3, r3, #1
 80009ba:	70fb      	strb	r3, [r7, #3]
	SlaveAddr |= 1;
 80009bc:	78fb      	ldrb	r3, [r7, #3]
 80009be:	f043 0301 	orr.w	r3, r3, #1
 80009c2:	70fb      	strb	r3, [r7, #3]
	//Put into Data Register
	pI2Cx->DR = SlaveAddr;
 80009c4:	78fa      	ldrb	r2, [r7, #3]
 80009c6:	687b      	ldr	r3, [r7, #4]
 80009c8:	611a      	str	r2, [r3, #16]
}
 80009ca:	bf00      	nop
 80009cc:	370c      	adds	r7, #12
 80009ce:	46bd      	mov	sp, r7
 80009d0:	bc80      	pop	{r7}
 80009d2:	4770      	bx	lr

080009d4 <I2C_ClearADDRFlag>:

static void I2C_ClearADDRFlag(I2C_Handle_t *pI2C_Handle)						//For non blocking api's refer blocking api , before
{
 80009d4:	b580      	push	{r7, lr}
 80009d6:	b084      	sub	sp, #16
 80009d8:	af00      	add	r7, sp, #0
 80009da:	6078      	str	r0, [r7, #4]
	uint32_t dummyRead;

	//Check for the device is Master mode or Slave mode
	if ( pI2C_Handle->pI2Cx->SR2 & ( 1<< I2C_SR2_MSL) )
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	681b      	ldr	r3, [r3, #0]
 80009e0:	699b      	ldr	r3, [r3, #24]
 80009e2:	f003 0301 	and.w	r3, r3, #1
 80009e6:	2b00      	cmp	r3, #0
 80009e8:	d01f      	beq.n	8000a2a <I2C_ClearADDRFlag+0x56>
	{
		//The Device in Master Mode***

			//Lets first check the staete
			if ( pI2C_Handle->TxRxState == I2C_BUSY_IN_RX)
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	7d9b      	ldrb	r3, [r3, #22]
 80009ee:	2b01      	cmp	r3, #1
 80009f0:	d112      	bne.n	8000a18 <I2C_ClearADDRFlag+0x44>
			{
					//Then lets check the Length
					if ( pI2C_Handle->RxSize == 1)
 80009f2:	687b      	ldr	r3, [r7, #4]
 80009f4:	7e1b      	ldrb	r3, [r3, #24]
 80009f6:	2b01      	cmp	r3, #1
 80009f8:	d11f      	bne.n	8000a3a <I2C_ClearADDRFlag+0x66>
					{
							//Then diable the ACK
							I2C_ManagaeAcking(pI2C_Handle->pI2Cx, I2C_ACK_DISABLE);
 80009fa:	687b      	ldr	r3, [r7, #4]
 80009fc:	681b      	ldr	r3, [r3, #0]
 80009fe:	2100      	movs	r1, #0
 8000a00:	4618      	mov	r0, r3
 8000a02:	f000 f82d 	bl	8000a60 <I2C_ManagaeAcking>

							//Then clear the ADDR flag(Read SR1, followed by SR2)
							dummyRead = pI2C_Handle->pI2Cx->SR1;
 8000a06:	687b      	ldr	r3, [r7, #4]
 8000a08:	681b      	ldr	r3, [r3, #0]
 8000a0a:	695b      	ldr	r3, [r3, #20]
 8000a0c:	60fb      	str	r3, [r7, #12]
							dummyRead= pI2C_Handle->pI2Cx->SR2;
 8000a0e:	687b      	ldr	r3, [r7, #4]
 8000a10:	681b      	ldr	r3, [r3, #0]
 8000a12:	699b      	ldr	r3, [r3, #24]
 8000a14:	60fb      	str	r3, [r7, #12]
									dummyRead = pI2C_Handle->pI2Cx->SR2;
									(void )dummyRead;

	}

}
 8000a16:	e010      	b.n	8000a3a <I2C_ClearADDRFlag+0x66>
							dummyRead = pI2C_Handle->pI2Cx->SR1;
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	681b      	ldr	r3, [r3, #0]
 8000a1c:	695b      	ldr	r3, [r3, #20]
 8000a1e:	60fb      	str	r3, [r7, #12]
							dummyRead =  pI2C_Handle->pI2Cx->SR2;
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	681b      	ldr	r3, [r3, #0]
 8000a24:	699b      	ldr	r3, [r3, #24]
 8000a26:	60fb      	str	r3, [r7, #12]
}
 8000a28:	e007      	b.n	8000a3a <I2C_ClearADDRFlag+0x66>
									dummyRead = pI2C_Handle->pI2Cx->SR1;
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	681b      	ldr	r3, [r3, #0]
 8000a2e:	695b      	ldr	r3, [r3, #20]
 8000a30:	60fb      	str	r3, [r7, #12]
									dummyRead = pI2C_Handle->pI2Cx->SR2;
 8000a32:	687b      	ldr	r3, [r7, #4]
 8000a34:	681b      	ldr	r3, [r3, #0]
 8000a36:	699b      	ldr	r3, [r3, #24]
 8000a38:	60fb      	str	r3, [r7, #12]
}
 8000a3a:	bf00      	nop
 8000a3c:	3710      	adds	r7, #16
 8000a3e:	46bd      	mov	sp, r7
 8000a40:	bd80      	pop	{r7, pc}

08000a42 <I2C_GenerateStopCondition>:

void I2C_GenerateStopCondition(I2C_RegDef_t *pI2Cx)
{
 8000a42:	b480      	push	{r7}
 8000a44:	b083      	sub	sp, #12
 8000a46:	af00      	add	r7, sp, #0
 8000a48:	6078      	str	r0, [r7, #4]
	pI2Cx->I2C_CR1  |= ( 1 << I2C_CR1_STOP );
 8000a4a:	687b      	ldr	r3, [r7, #4]
 8000a4c:	681b      	ldr	r3, [r3, #0]
 8000a4e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8000a52:	687b      	ldr	r3, [r7, #4]
 8000a54:	601a      	str	r2, [r3, #0]
}
 8000a56:	bf00      	nop
 8000a58:	370c      	adds	r7, #12
 8000a5a:	46bd      	mov	sp, r7
 8000a5c:	bc80      	pop	{r7}
 8000a5e:	4770      	bx	lr

08000a60 <I2C_ManagaeAcking>:


void I2C_ManagaeAcking(I2C_RegDef_t *pI2Cx,uint8_t EnorDi)
{
 8000a60:	b480      	push	{r7}
 8000a62:	b083      	sub	sp, #12
 8000a64:	af00      	add	r7, sp, #0
 8000a66:	6078      	str	r0, [r7, #4]
 8000a68:	460b      	mov	r3, r1
 8000a6a:	70fb      	strb	r3, [r7, #3]
	if (EnorDi == I2C_ACK_ENABLE)
 8000a6c:	78fb      	ldrb	r3, [r7, #3]
 8000a6e:	2b01      	cmp	r3, #1
 8000a70:	d105      	bne.n	8000a7e <I2C_ManagaeAcking+0x1e>
	{
		pI2Cx->I2C_CR1 |= ( 1 << I2C_CR1_ACK);		//Enable
 8000a72:	687b      	ldr	r3, [r7, #4]
 8000a74:	681b      	ldr	r3, [r3, #0]
 8000a76:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	601a      	str	r2, [r3, #0]
	}
	if (EnorDi == I2C_ACK_DISABLE)
 8000a7e:	78fb      	ldrb	r3, [r7, #3]
 8000a80:	2b00      	cmp	r3, #0
 8000a82:	d105      	bne.n	8000a90 <I2C_ManagaeAcking+0x30>
	{
		pI2Cx->I2C_CR1 &= ~( 1 << I2C_CR1_ACK); //Disable
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	681b      	ldr	r3, [r3, #0]
 8000a88:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	601a      	str	r2, [r3, #0]
	}
}
 8000a90:	bf00      	nop
 8000a92:	370c      	adds	r7, #12
 8000a94:	46bd      	mov	sp, r7
 8000a96:	bc80      	pop	{r7}
 8000a98:	4770      	bx	lr
	...

08000a9c <I2C_PeriClockControl>:
  *
  *	@Note				- none

*/
void I2C_PeriClockControl(I2C_RegDef_t *pI2Cx,uint8_t EnorDI)
{
 8000a9c:	b480      	push	{r7}
 8000a9e:	b083      	sub	sp, #12
 8000aa0:	af00      	add	r7, sp, #0
 8000aa2:	6078      	str	r0, [r7, #4]
 8000aa4:	460b      	mov	r3, r1
 8000aa6:	70fb      	strb	r3, [r7, #3]
	if (EnorDI == ENABLE)
 8000aa8:	78fb      	ldrb	r3, [r7, #3]
 8000aaa:	2b01      	cmp	r3, #1
 8000aac:	d120      	bne.n	8000af0 <I2C_PeriClockControl+0x54>
	{
		if(pI2Cx == I2C1)
 8000aae:	687b      	ldr	r3, [r7, #4]
 8000ab0:	4a22      	ldr	r2, [pc, #136]	; (8000b3c <I2C_PeriClockControl+0xa0>)
 8000ab2:	4293      	cmp	r3, r2
 8000ab4:	d106      	bne.n	8000ac4 <I2C_PeriClockControl+0x28>
		{
			I2C1_PCLK_EN();
 8000ab6:	4b22      	ldr	r3, [pc, #136]	; (8000b40 <I2C_PeriClockControl+0xa4>)
 8000ab8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000aba:	4a21      	ldr	r2, [pc, #132]	; (8000b40 <I2C_PeriClockControl+0xa4>)
 8000abc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000ac0:	6413      	str	r3, [r2, #64]	; 0x40
		else if (pI2Cx == I2C3)
		{
			I2C3_PCLK_DI();
		}
	}
}
 8000ac2:	e035      	b.n	8000b30 <I2C_PeriClockControl+0x94>
		else if (pI2Cx == I2C2)
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	4a1f      	ldr	r2, [pc, #124]	; (8000b44 <I2C_PeriClockControl+0xa8>)
 8000ac8:	4293      	cmp	r3, r2
 8000aca:	d106      	bne.n	8000ada <I2C_PeriClockControl+0x3e>
			I2C2_PCLK_EN();
 8000acc:	4b1c      	ldr	r3, [pc, #112]	; (8000b40 <I2C_PeriClockControl+0xa4>)
 8000ace:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ad0:	4a1b      	ldr	r2, [pc, #108]	; (8000b40 <I2C_PeriClockControl+0xa4>)
 8000ad2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000ad6:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000ad8:	e02a      	b.n	8000b30 <I2C_PeriClockControl+0x94>
		else if (pI2Cx == I2C3)
 8000ada:	687b      	ldr	r3, [r7, #4]
 8000adc:	4a1a      	ldr	r2, [pc, #104]	; (8000b48 <I2C_PeriClockControl+0xac>)
 8000ade:	4293      	cmp	r3, r2
 8000ae0:	d126      	bne.n	8000b30 <I2C_PeriClockControl+0x94>
			I2C3_PCLK_EN();
 8000ae2:	4b17      	ldr	r3, [pc, #92]	; (8000b40 <I2C_PeriClockControl+0xa4>)
 8000ae4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ae6:	4a16      	ldr	r2, [pc, #88]	; (8000b40 <I2C_PeriClockControl+0xa4>)
 8000ae8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000aec:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000aee:	e01f      	b.n	8000b30 <I2C_PeriClockControl+0x94>
		if(pI2Cx == I2C1)
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	4a12      	ldr	r2, [pc, #72]	; (8000b3c <I2C_PeriClockControl+0xa0>)
 8000af4:	4293      	cmp	r3, r2
 8000af6:	d106      	bne.n	8000b06 <I2C_PeriClockControl+0x6a>
			I2C1_PCLK_DI();
 8000af8:	4b11      	ldr	r3, [pc, #68]	; (8000b40 <I2C_PeriClockControl+0xa4>)
 8000afa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000afc:	4a10      	ldr	r2, [pc, #64]	; (8000b40 <I2C_PeriClockControl+0xa4>)
 8000afe:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8000b02:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000b04:	e014      	b.n	8000b30 <I2C_PeriClockControl+0x94>
		else if (pI2Cx == I2C2)
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	4a0e      	ldr	r2, [pc, #56]	; (8000b44 <I2C_PeriClockControl+0xa8>)
 8000b0a:	4293      	cmp	r3, r2
 8000b0c:	d106      	bne.n	8000b1c <I2C_PeriClockControl+0x80>
			I2C2_PCLK_DI();
 8000b0e:	4b0c      	ldr	r3, [pc, #48]	; (8000b40 <I2C_PeriClockControl+0xa4>)
 8000b10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b12:	4a0b      	ldr	r2, [pc, #44]	; (8000b40 <I2C_PeriClockControl+0xa4>)
 8000b14:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8000b18:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000b1a:	e009      	b.n	8000b30 <I2C_PeriClockControl+0x94>
		else if (pI2Cx == I2C3)
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	4a0a      	ldr	r2, [pc, #40]	; (8000b48 <I2C_PeriClockControl+0xac>)
 8000b20:	4293      	cmp	r3, r2
 8000b22:	d105      	bne.n	8000b30 <I2C_PeriClockControl+0x94>
			I2C3_PCLK_DI();
 8000b24:	4b06      	ldr	r3, [pc, #24]	; (8000b40 <I2C_PeriClockControl+0xa4>)
 8000b26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b28:	4a05      	ldr	r2, [pc, #20]	; (8000b40 <I2C_PeriClockControl+0xa4>)
 8000b2a:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8000b2e:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000b30:	bf00      	nop
 8000b32:	370c      	adds	r7, #12
 8000b34:	46bd      	mov	sp, r7
 8000b36:	bc80      	pop	{r7}
 8000b38:	4770      	bx	lr
 8000b3a:	bf00      	nop
 8000b3c:	40005400 	.word	0x40005400
 8000b40:	40023800 	.word	0x40023800
 8000b44:	40005800 	.word	0x40005800
 8000b48:	40005c00 	.word	0x40005c00

08000b4c <RCC_GetPLLOutputClk>:

//Creating a fucntion to get the value of PLL

uint32_t RCC_GetPLLOutputClk(void)
{
 8000b4c:	b480      	push	{r7}
 8000b4e:	af00      	add	r7, sp, #0
	return 0;
 8000b50:	2300      	movs	r3, #0
}
 8000b52:	4618      	mov	r0, r3
 8000b54:	46bd      	mov	sp, r7
 8000b56:	bc80      	pop	{r7}
 8000b58:	4770      	bx	lr
	...

08000b5c <RCC_GetPCLK1Value>:
//1. identify the clock source
//2. Identify the AHB prescalar value
//3. Identify the APB1 prescalar value

uint32_t RCC_GetPCLK1Value(void)
{
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	b084      	sub	sp, #16
 8000b60:	af00      	add	r7, sp, #0
	uint32_t pclk1;
	uint8_t clksrc, temp, ahbp,apb1p;
	uint32_t systemClk;

	//1. Identify the clock source
	clksrc = ((RCC->CFGR >> 2 ) & 0x3);
 8000b62:	4b26      	ldr	r3, [pc, #152]	; (8000bfc <RCC_GetPCLK1Value+0xa0>)
 8000b64:	689b      	ldr	r3, [r3, #8]
 8000b66:	089b      	lsrs	r3, r3, #2
 8000b68:	b2db      	uxtb	r3, r3
 8000b6a:	f003 0303 	and.w	r3, r3, #3
 8000b6e:	71fb      	strb	r3, [r7, #7]

	if (clksrc ==0)
 8000b70:	79fb      	ldrb	r3, [r7, #7]
 8000b72:	2b00      	cmp	r3, #0
 8000b74:	d102      	bne.n	8000b7c <RCC_GetPCLK1Value+0x20>
	{
		systemClk = 16000000;
 8000b76:	4b22      	ldr	r3, [pc, #136]	; (8000c00 <RCC_GetPCLK1Value+0xa4>)
 8000b78:	60bb      	str	r3, [r7, #8]
 8000b7a:	e00b      	b.n	8000b94 <RCC_GetPCLK1Value+0x38>
	}
	else if (clksrc == 1 )
 8000b7c:	79fb      	ldrb	r3, [r7, #7]
 8000b7e:	2b01      	cmp	r3, #1
 8000b80:	d102      	bne.n	8000b88 <RCC_GetPCLK1Value+0x2c>
	{
		systemClk = 8000000;
 8000b82:	4b20      	ldr	r3, [pc, #128]	; (8000c04 <RCC_GetPCLK1Value+0xa8>)
 8000b84:	60bb      	str	r3, [r7, #8]
 8000b86:	e005      	b.n	8000b94 <RCC_GetPCLK1Value+0x38>
	}
	else if (clksrc == 2 )
 8000b88:	79fb      	ldrb	r3, [r7, #7]
 8000b8a:	2b02      	cmp	r3, #2
 8000b8c:	d102      	bne.n	8000b94 <RCC_GetPCLK1Value+0x38>
	{
		systemClk = RCC_GetPLLOutputClk();
 8000b8e:	f7ff ffdd 	bl	8000b4c <RCC_GetPLLOutputClk>
 8000b92:	60b8      	str	r0, [r7, #8]
	}

	//2.Identify the AHP Prescalar value
	//Read the value of HPRE in clock Configuration Register

	temp  = ((RCC->CFGR >> 4 ) & 0xF);
 8000b94:	4b19      	ldr	r3, [pc, #100]	; (8000bfc <RCC_GetPCLK1Value+0xa0>)
 8000b96:	689b      	ldr	r3, [r3, #8]
 8000b98:	091b      	lsrs	r3, r3, #4
 8000b9a:	b2db      	uxtb	r3, r3
 8000b9c:	f003 030f 	and.w	r3, r3, #15
 8000ba0:	71bb      	strb	r3, [r7, #6]

	if (temp < 8 )
 8000ba2:	79bb      	ldrb	r3, [r7, #6]
 8000ba4:	2b07      	cmp	r3, #7
 8000ba6:	d802      	bhi.n	8000bae <RCC_GetPCLK1Value+0x52>
	{
		ahbp = 1;
 8000ba8:	2301      	movs	r3, #1
 8000baa:	73fb      	strb	r3, [r7, #15]
 8000bac:	e005      	b.n	8000bba <RCC_GetPCLK1Value+0x5e>
	}
	else
	{
		ahbp = AHB_Prescalar[temp - 8 ]; // To get the first value from array
 8000bae:	79bb      	ldrb	r3, [r7, #6]
 8000bb0:	3b08      	subs	r3, #8
 8000bb2:	4a15      	ldr	r2, [pc, #84]	; (8000c08 <RCC_GetPCLK1Value+0xac>)
 8000bb4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000bb8:	73fb      	strb	r3, [r7, #15]
	}

	//3. Identify the APB PreScaler

	temp = ((RCC->CFGR >> 10) & 0x7);
 8000bba:	4b10      	ldr	r3, [pc, #64]	; (8000bfc <RCC_GetPCLK1Value+0xa0>)
 8000bbc:	689b      	ldr	r3, [r3, #8]
 8000bbe:	0a9b      	lsrs	r3, r3, #10
 8000bc0:	b2db      	uxtb	r3, r3
 8000bc2:	f003 0307 	and.w	r3, r3, #7
 8000bc6:	71bb      	strb	r3, [r7, #6]
	if (temp <4)
 8000bc8:	79bb      	ldrb	r3, [r7, #6]
 8000bca:	2b03      	cmp	r3, #3
 8000bcc:	d802      	bhi.n	8000bd4 <RCC_GetPCLK1Value+0x78>
	{
		apb1p = 1;
 8000bce:	2301      	movs	r3, #1
 8000bd0:	73bb      	strb	r3, [r7, #14]
 8000bd2:	e005      	b.n	8000be0 <RCC_GetPCLK1Value+0x84>
	}
	else
	{
		apb1p = APB1_Prescalar[temp - 4];
 8000bd4:	79bb      	ldrb	r3, [r7, #6]
 8000bd6:	3b04      	subs	r3, #4
 8000bd8:	4a0c      	ldr	r2, [pc, #48]	; (8000c0c <RCC_GetPCLK1Value+0xb0>)
 8000bda:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000bde:	73bb      	strb	r3, [r7, #14]
	}

	//Finally getting the PCLK1 -> verify in clock diagram
	pclk1 = (systemClk / ahbp) / apb1p;
 8000be0:	7bfb      	ldrb	r3, [r7, #15]
 8000be2:	68ba      	ldr	r2, [r7, #8]
 8000be4:	fbb2 f2f3 	udiv	r2, r2, r3
 8000be8:	7bbb      	ldrb	r3, [r7, #14]
 8000bea:	fbb2 f3f3 	udiv	r3, r2, r3
 8000bee:	603b      	str	r3, [r7, #0]

	return pclk1;
 8000bf0:	683b      	ldr	r3, [r7, #0]
}
 8000bf2:	4618      	mov	r0, r3
 8000bf4:	3710      	adds	r7, #16
 8000bf6:	46bd      	mov	sp, r7
 8000bf8:	bd80      	pop	{r7, pc}
 8000bfa:	bf00      	nop
 8000bfc:	40023800 	.word	0x40023800
 8000c00:	00f42400 	.word	0x00f42400
 8000c04:	007a1200 	.word	0x007a1200
 8000c08:	20000000 	.word	0x20000000
 8000c0c:	20000014 	.word	0x20000014

08000c10 <I2C_Init>:
  *
  *	@Note				- none

*/
void I2C_Init(I2C_Handle_t  *pI2C_Handle_t)
{
 8000c10:	b580      	push	{r7, lr}
 8000c12:	b084      	sub	sp, #16
 8000c14:	af00      	add	r7, sp, #0
 8000c16:	6078      	str	r0, [r7, #4]
	//.Creating the temp variable and trise variable

	uint32_t tempreg = 0 ;
 8000c18:	2300      	movs	r3, #0
 8000c1a:	60fb      	str	r3, [r7, #12]

	//Enable the I2C peripheral Clock
	I2C_PeriClockControl(pI2C_Handle_t->pI2Cx, ENABLE);
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	681b      	ldr	r3, [r3, #0]
 8000c20:	2101      	movs	r1, #1
 8000c22:	4618      	mov	r0, r3
 8000c24:	f7ff ff3a 	bl	8000a9c <I2C_PeriClockControl>


	//1. ACK control Bit
	//tempreg |= (pI2C_Handle_t->I2C_Config.I2C_ACKControl   << I2C_CR1_ACK) ;
	 pI2C_Handle_t->pI2Cx->I2C_CR1 |= ( 1 << 10);
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	681b      	ldr	r3, [r3, #0]
 8000c2c:	681a      	ldr	r2, [r3, #0]
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	681b      	ldr	r3, [r3, #0]
 8000c32:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000c36:	601a      	str	r2, [r3, #0]

	//2. Configure the FREQ field

	tempreg = 0;
 8000c38:	2300      	movs	r3, #0
 8000c3a:	60fb      	str	r3, [r7, #12]
	tempreg |= RCC_GetPCLK1Value() / 1000000U ;   //Because we want only the number. eg 16
 8000c3c:	f7ff ff8e 	bl	8000b5c <RCC_GetPCLK1Value>
 8000c40:	4602      	mov	r2, r0
 8000c42:	4b4e      	ldr	r3, [pc, #312]	; (8000d7c <I2C_Init+0x16c>)
 8000c44:	fba3 2302 	umull	r2, r3, r3, r2
 8000c48:	0c9b      	lsrs	r3, r3, #18
 8000c4a:	68fa      	ldr	r2, [r7, #12]
 8000c4c:	4313      	orrs	r3, r2
 8000c4e:	60fb      	str	r3, [r7, #12]
	pI2C_Handle_t->pI2Cx->I2C_CR2 = (tempreg & 0x3F);
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	681b      	ldr	r3, [r3, #0]
 8000c54:	68fa      	ldr	r2, [r7, #12]
 8000c56:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8000c5a:	605a      	str	r2, [r3, #4]

	//3. Configure the device own  address in OWN register

	tempreg= 0 ;
 8000c5c:	2300      	movs	r3, #0
 8000c5e:	60fb      	str	r3, [r7, #12]

	tempreg |= (pI2C_Handle_t->I2C_Config.I2C_DeviceAddress  << 1 );  // Because 1st bit is dont care in 7bit addressing Mode
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	7a1b      	ldrb	r3, [r3, #8]
 8000c64:	005b      	lsls	r3, r3, #1
 8000c66:	461a      	mov	r2, r3
 8000c68:	68fb      	ldr	r3, [r7, #12]
 8000c6a:	4313      	orrs	r3, r2
 8000c6c:	60fb      	str	r3, [r7, #12]
	//Read reference manual 14th bit kept at 1 by software (Reserved)
	tempreg |= (1 << 14);
 8000c6e:	68fb      	ldr	r3, [r7, #12]
 8000c70:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c74:	60fb      	str	r3, [r7, #12]
	pI2C_Handle_t->pI2Cx->OAR1 = tempreg;
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	681b      	ldr	r3, [r3, #0]
 8000c7a:	68fa      	ldr	r2, [r7, #12]
 8000c7c:	609a      	str	r2, [r3, #8]
	//Read reference manual 14th bit kept at1 by software

	//4. CCR calculation

	uint16_t ccr_value = 0;
 8000c7e:	2300      	movs	r3, #0
 8000c80:	817b      	strh	r3, [r7, #10]
	tempreg = 0;
 8000c82:	2300      	movs	r3, #0
 8000c84:	60fb      	str	r3, [r7, #12]

	//First to find the Speed mode

	if (pI2C_Handle_t->I2C_Config.I2C_SCLSpeed <= I2C_SCL_SPEED_SM)
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	685b      	ldr	r3, [r3, #4]
 8000c8a:	4a3d      	ldr	r2, [pc, #244]	; (8000d80 <I2C_Init+0x170>)
 8000c8c:	4293      	cmp	r3, r2
 8000c8e:	d80f      	bhi.n	8000cb0 <I2C_Init+0xa0>
	{
		//Then it is standard Mode
		//By default the standard Mode is configured in CCR Register in 15th Bit
		//calculation for CCR in SM mode

		ccr_value = (RCC_GetPCLK1Value() / (2* pI2C_Handle_t->I2C_Config.I2C_SCLSpeed) );  // CCR = pclock / (2* SCK by user)
 8000c90:	f7ff ff64 	bl	8000b5c <RCC_GetPCLK1Value>
 8000c94:	4602      	mov	r2, r0
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	685b      	ldr	r3, [r3, #4]
 8000c9a:	005b      	lsls	r3, r3, #1
 8000c9c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ca0:	817b      	strh	r3, [r7, #10]
		tempreg |= (ccr_value & 0xFFF); //masking only ccr bit fields
 8000ca2:	897b      	ldrh	r3, [r7, #10]
 8000ca4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000ca8:	68fa      	ldr	r2, [r7, #12]
 8000caa:	4313      	orrs	r3, r2
 8000cac:	60fb      	str	r3, [r7, #12]
 8000cae:	e02d      	b.n	8000d0c <I2C_Init+0xfc>
	else
	{
		//the mode is Fast Mode
		//Set fast mode in Bit 15th

		tempreg |= (1 << 15);
 8000cb0:	68fb      	ldr	r3, [r7, #12]
 8000cb2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000cb6:	60fb      	str	r3, [r7, #12]
		//then set the duty cycle

		tempreg |= (pI2C_Handle_t->I2C_Config.I2C_FMDuty_Cycle <<  14 );
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	895b      	ldrh	r3, [r3, #10]
 8000cbc:	039b      	lsls	r3, r3, #14
 8000cbe:	461a      	mov	r2, r3
 8000cc0:	68fb      	ldr	r3, [r7, #12]
 8000cc2:	4313      	orrs	r3, r2
 8000cc4:	60fb      	str	r3, [r7, #12]
		//Based on duty cycle use formular

		if (pI2C_Handle_t->I2C_Config.I2C_FMDuty_Cycle == I2C_FM_DUTY_2)
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	895b      	ldrh	r3, [r3, #10]
 8000cca:	2b01      	cmp	r3, #1
 8000ccc:	d10b      	bne.n	8000ce6 <I2C_Init+0xd6>
		{
			ccr_value = (RCC_GetPCLK1Value() / (3 * pI2C_Handle_t->I2C_Config.I2C_SCLSpeed));
 8000cce:	f7ff ff45 	bl	8000b5c <RCC_GetPCLK1Value>
 8000cd2:	4601      	mov	r1, r0
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	685a      	ldr	r2, [r3, #4]
 8000cd8:	4613      	mov	r3, r2
 8000cda:	005b      	lsls	r3, r3, #1
 8000cdc:	4413      	add	r3, r2
 8000cde:	fbb1 f3f3 	udiv	r3, r1, r3
 8000ce2:	817b      	strh	r3, [r7, #10]
 8000ce4:	e00c      	b.n	8000d00 <I2C_Init+0xf0>
		}
		else
		{
			ccr_value = (RCC_GetPCLK1Value() / (25 * pI2C_Handle_t->I2C_Config.I2C_SCLSpeed));
 8000ce6:	f7ff ff39 	bl	8000b5c <RCC_GetPCLK1Value>
 8000cea:	4601      	mov	r1, r0
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	685a      	ldr	r2, [r3, #4]
 8000cf0:	4613      	mov	r3, r2
 8000cf2:	009b      	lsls	r3, r3, #2
 8000cf4:	4413      	add	r3, r2
 8000cf6:	009a      	lsls	r2, r3, #2
 8000cf8:	4413      	add	r3, r2
 8000cfa:	fbb1 f3f3 	udiv	r3, r1, r3
 8000cfe:	817b      	strh	r3, [r7, #10]
		}
		tempreg |= (ccr_value & 0xFFF);
 8000d00:	897b      	ldrh	r3, [r7, #10]
 8000d02:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000d06:	68fa      	ldr	r2, [r7, #12]
 8000d08:	4313      	orrs	r3, r2
 8000d0a:	60fb      	str	r3, [r7, #12]
	}
	pI2C_Handle_t->pI2Cx->CCR |= tempreg;
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	681b      	ldr	r3, [r3, #0]
 8000d10:	69d9      	ldr	r1, [r3, #28]
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	681b      	ldr	r3, [r3, #0]
 8000d16:	68fa      	ldr	r2, [r7, #12]
 8000d18:	430a      	orrs	r2, r1
 8000d1a:	61da      	str	r2, [r3, #28]


		//5.  TRISE configuration
		//First check the Mode Sm or Fm

	if (pI2C_Handle_t->I2C_Config.I2C_SCLSpeed == I2C_SCL_SPEED_SM)
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	685b      	ldr	r3, [r3, #4]
 8000d20:	4a17      	ldr	r2, [pc, #92]	; (8000d80 <I2C_Init+0x170>)
 8000d22:	4293      	cmp	r3, r2
 8000d24:	d10b      	bne.n	8000d3e <I2C_Init+0x12e>
	{
		//Mode is Standard Mode
		tempreg = 0;
 8000d26:	2300      	movs	r3, #0
 8000d28:	60fb      	str	r3, [r7, #12]
		tempreg = (RCC_GetPCLK1Value()  / 1000000U ) + 1 	;//Formula : (Pclk1 * Trise)+1 ,  we can simply say , trise = 1us ,so we divide by 1MHZ
 8000d2a:	f7ff ff17 	bl	8000b5c <RCC_GetPCLK1Value>
 8000d2e:	4602      	mov	r2, r0
 8000d30:	4b12      	ldr	r3, [pc, #72]	; (8000d7c <I2C_Init+0x16c>)
 8000d32:	fba3 2302 	umull	r2, r3, r3, r2
 8000d36:	0c9b      	lsrs	r3, r3, #18
 8000d38:	3301      	adds	r3, #1
 8000d3a:	60fb      	str	r3, [r7, #12]
 8000d3c:	e00f      	b.n	8000d5e <I2C_Init+0x14e>

	}
	else
	{
		//Mode is Fast Mode
		tempreg =0;
 8000d3e:	2300      	movs	r3, #0
 8000d40:	60fb      	str	r3, [r7, #12]
		tempreg = ( (RCC_GetPCLK1Value() * 300 ) / 1000000000U ) +1;					//Fast Mode trise = 300ns
 8000d42:	f7ff ff0b 	bl	8000b5c <RCC_GetPCLK1Value>
 8000d46:	4602      	mov	r2, r0
 8000d48:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8000d4c:	fb03 f302 	mul.w	r3, r3, r2
 8000d50:	0a5b      	lsrs	r3, r3, #9
 8000d52:	4a0c      	ldr	r2, [pc, #48]	; (8000d84 <I2C_Init+0x174>)
 8000d54:	fba2 2303 	umull	r2, r3, r2, r3
 8000d58:	09db      	lsrs	r3, r3, #7
 8000d5a:	3301      	adds	r3, #1
 8000d5c:	60fb      	str	r3, [r7, #12]
	}

	pI2C_Handle_t->pI2Cx->TRISE |= (tempreg & 0x3F);
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	681b      	ldr	r3, [r3, #0]
 8000d62:	6a19      	ldr	r1, [r3, #32]
 8000d64:	68fb      	ldr	r3, [r7, #12]
 8000d66:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	681b      	ldr	r3, [r3, #0]
 8000d6e:	430a      	orrs	r2, r1
 8000d70:	621a      	str	r2, [r3, #32]


}
 8000d72:	bf00      	nop
 8000d74:	3710      	adds	r7, #16
 8000d76:	46bd      	mov	sp, r7
 8000d78:	bd80      	pop	{r7, pc}
 8000d7a:	bf00      	nop
 8000d7c:	431bde83 	.word	0x431bde83
 8000d80:	000186a0 	.word	0x000186a0
 8000d84:	00044b83 	.word	0x00044b83

08000d88 <I2C_MasterSendDataIT>:
  *	@Note				- none

*/

uint8_t  I2C_MasterSendDataIT(I2C_Handle_t *pI2C_Handle , uint8_t *pTxBuffer , uint32_t Len, uint8_t Slaveaddress,uint8_t Sr)
{
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	b086      	sub	sp, #24
 8000d8c:	af00      	add	r7, sp, #0
 8000d8e:	60f8      	str	r0, [r7, #12]
 8000d90:	60b9      	str	r1, [r7, #8]
 8000d92:	607a      	str	r2, [r7, #4]
 8000d94:	70fb      	strb	r3, [r7, #3]
	uint8_t busystate;
	busystate = pI2C_Handle->TxRxState;
 8000d96:	68fb      	ldr	r3, [r7, #12]
 8000d98:	7d9b      	ldrb	r3, [r3, #22]
 8000d9a:	75fb      	strb	r3, [r7, #23]

	//checking if I2C busy or Not
	if ( ( busystate != I2C_BUSY_IN_TX) && (busystate != I2C_BUSY_IN_RX) )
 8000d9c:	7dfb      	ldrb	r3, [r7, #23]
 8000d9e:	2b02      	cmp	r3, #2
 8000da0:	d030      	beq.n	8000e04 <I2C_MasterSendDataIT+0x7c>
 8000da2:	7dfb      	ldrb	r3, [r7, #23]
 8000da4:	2b01      	cmp	r3, #1
 8000da6:	d02d      	beq.n	8000e04 <I2C_MasterSendDataIT+0x7c>
	{
		pI2C_Handle->pTxBuffer = pTxBuffer;
 8000da8:	68fb      	ldr	r3, [r7, #12]
 8000daa:	68ba      	ldr	r2, [r7, #8]
 8000dac:	60da      	str	r2, [r3, #12]
		pI2C_Handle->TxLen = Len;
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	b2da      	uxtb	r2, r3
 8000db2:	68fb      	ldr	r3, [r7, #12]
 8000db4:	751a      	strb	r2, [r3, #20]
		pI2C_Handle->TxRxState = I2C_BUSY_IN_TX;
 8000db6:	68fb      	ldr	r3, [r7, #12]
 8000db8:	2202      	movs	r2, #2
 8000dba:	759a      	strb	r2, [r3, #22]
		pI2C_Handle->DevAddr = Slaveaddress;
 8000dbc:	68fb      	ldr	r3, [r7, #12]
 8000dbe:	78fa      	ldrb	r2, [r7, #3]
 8000dc0:	75da      	strb	r2, [r3, #23]
		pI2C_Handle->Sr = Sr;
 8000dc2:	68fb      	ldr	r3, [r7, #12]
 8000dc4:	f897 2020 	ldrb.w	r2, [r7, #32]
 8000dc8:	765a      	strb	r2, [r3, #25]

		//1.	Implement the code to generate start condition
		I2C_GenerateStartCondition(pI2C_Handle->pI2Cx);
 8000dca:	68fb      	ldr	r3, [r7, #12]
 8000dcc:	681b      	ldr	r3, [r3, #0]
 8000dce:	4618      	mov	r0, r3
 8000dd0:	f7ff fdc7 	bl	8000962 <I2C_GenerateStartCondition>

		//2.	Implement the code to enable ITBUFEN in Control Register 2
		pI2C_Handle->pI2Cx->I2C_CR2 |= ( 1 << I2C_CR2_ITBUFEN);
 8000dd4:	68fb      	ldr	r3, [r7, #12]
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	685a      	ldr	r2, [r3, #4]
 8000dda:	68fb      	ldr	r3, [r7, #12]
 8000ddc:	681b      	ldr	r3, [r3, #0]
 8000dde:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000de2:	605a      	str	r2, [r3, #4]

		//	3. Implement the code to enable ITEVFEN in Control Register 2
		pI2C_Handle->pI2Cx->I2C_CR2 |= ( 1 << I2C_CR2_ITEVTEN);
 8000de4:	68fb      	ldr	r3, [r7, #12]
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	685a      	ldr	r2, [r3, #4]
 8000dea:	68fb      	ldr	r3, [r7, #12]
 8000dec:	681b      	ldr	r3, [r3, #0]
 8000dee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000df2:	605a      	str	r2, [r3, #4]

		//4. Implement the code to enable ITERREN in Control Register 2
		pI2C_Handle->pI2Cx->I2C_CR2 |= ( 1 << I2C_CR2_ITERREN);
 8000df4:	68fb      	ldr	r3, [r7, #12]
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	685a      	ldr	r2, [r3, #4]
 8000dfa:	68fb      	ldr	r3, [r7, #12]
 8000dfc:	681b      	ldr	r3, [r3, #0]
 8000dfe:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000e02:	605a      	str	r2, [r3, #4]

	}
	//if above is not happen then continues this
	return busystate;
 8000e04:	7dfb      	ldrb	r3, [r7, #23]

}
 8000e06:	4618      	mov	r0, r3
 8000e08:	3718      	adds	r7, #24
 8000e0a:	46bd      	mov	sp, r7
 8000e0c:	bd80      	pop	{r7, pc}

08000e0e <I2C_MasterReceiveDataIT>:
  *	@Note				- none

*/

uint8_t I2C_MasterReceiveDataIT(I2C_Handle_t *pI2C_Handle ,  uint8_t  *pRxBuffer , uint32_t Len, uint8_t Slaveaddress,uint8_t Sr )
{
 8000e0e:	b580      	push	{r7, lr}
 8000e10:	b086      	sub	sp, #24
 8000e12:	af00      	add	r7, sp, #0
 8000e14:	60f8      	str	r0, [r7, #12]
 8000e16:	60b9      	str	r1, [r7, #8]
 8000e18:	607a      	str	r2, [r7, #4]
 8000e1a:	70fb      	strb	r3, [r7, #3]
	//	Lets first check the I2C is busy or not

	uint8_t busystate = pI2C_Handle->TxRxState;
 8000e1c:	68fb      	ldr	r3, [r7, #12]
 8000e1e:	7d9b      	ldrb	r3, [r3, #22]
 8000e20:	75fb      	strb	r3, [r7, #23]

	if ( (busystate != I2C_BUSY_IN_TX ) && ( busystate != I2C_BUSY_IN_RX))
 8000e22:	7dfb      	ldrb	r3, [r7, #23]
 8000e24:	2b02      	cmp	r3, #2
 8000e26:	d034      	beq.n	8000e92 <I2C_MasterReceiveDataIT+0x84>
 8000e28:	7dfb      	ldrb	r3, [r7, #23]
 8000e2a:	2b01      	cmp	r3, #1
 8000e2c:	d031      	beq.n	8000e92 <I2C_MasterReceiveDataIT+0x84>
	{
		pI2C_Handle->pRxBuffer = pRxBuffer;
 8000e2e:	68fb      	ldr	r3, [r7, #12]
 8000e30:	68ba      	ldr	r2, [r7, #8]
 8000e32:	611a      	str	r2, [r3, #16]
		pI2C_Handle->RxLen= Len;
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	b2da      	uxtb	r2, r3
 8000e38:	68fb      	ldr	r3, [r7, #12]
 8000e3a:	755a      	strb	r2, [r3, #21]
		pI2C_Handle->TxRxState= I2C_BUSY_IN_RX;
 8000e3c:	68fb      	ldr	r3, [r7, #12]
 8000e3e:	2201      	movs	r2, #1
 8000e40:	759a      	strb	r2, [r3, #22]
		pI2C_Handle->RxSize= Len;
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	b2da      	uxtb	r2, r3
 8000e46:	68fb      	ldr	r3, [r7, #12]
 8000e48:	761a      	strb	r2, [r3, #24]
		pI2C_Handle->DevAddr = Slaveaddress;
 8000e4a:	68fb      	ldr	r3, [r7, #12]
 8000e4c:	78fa      	ldrb	r2, [r7, #3]
 8000e4e:	75da      	strb	r2, [r3, #23]
		pI2C_Handle->Sr= Sr;
 8000e50:	68fb      	ldr	r3, [r7, #12]
 8000e52:	f897 2020 	ldrb.w	r2, [r7, #32]
 8000e56:	765a      	strb	r2, [r3, #25]

		//Implement to code to generate start condition
		I2C_GenerateStartCondition(pI2C_Handle->pI2Cx);
 8000e58:	68fb      	ldr	r3, [r7, #12]
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	4618      	mov	r0, r3
 8000e5e:	f7ff fd80 	bl	8000962 <I2C_GenerateStartCondition>

		//1.	Implementing the ITBUFEN Register in CR2 register
		pI2C_Handle->pI2Cx->I2C_CR2		 |= ( 1 << I2C_CR2_ITBUFEN);
 8000e62:	68fb      	ldr	r3, [r7, #12]
 8000e64:	681b      	ldr	r3, [r3, #0]
 8000e66:	685a      	ldr	r2, [r3, #4]
 8000e68:	68fb      	ldr	r3, [r7, #12]
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000e70:	605a      	str	r2, [r3, #4]

		//2. Implementing the ITEVEN Register in CR2 register
		pI2C_Handle->pI2Cx->I2C_CR2 	|= ( 1 << I2C_CR2_ITEVTEN);
 8000e72:	68fb      	ldr	r3, [r7, #12]
 8000e74:	681b      	ldr	r3, [r3, #0]
 8000e76:	685a      	ldr	r2, [r3, #4]
 8000e78:	68fb      	ldr	r3, [r7, #12]
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000e80:	605a      	str	r2, [r3, #4]

		//3. Implementing the ITERREN Register in CR2 register
		pI2C_Handle->pI2Cx->I2C_CR2 	|= (1 << I2C_CR2_ITERREN);
 8000e82:	68fb      	ldr	r3, [r7, #12]
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	685a      	ldr	r2, [r3, #4]
 8000e88:	68fb      	ldr	r3, [r7, #12]
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000e90:	605a      	str	r2, [r3, #4]
	}

	return busystate;
 8000e92:	7dfb      	ldrb	r3, [r7, #23]
}
 8000e94:	4618      	mov	r0, r3
 8000e96:	3718      	adds	r7, #24
 8000e98:	46bd      	mov	sp, r7
 8000e9a:	bd80      	pop	{r7, pc}

08000e9c <I2C_PeripheralControl>:
  *	@Note				- none

*/

void I2C_PeripheralControl(I2C_RegDef_t *pI2Cx , uint8_t EnorDi)
{
 8000e9c:	b480      	push	{r7}
 8000e9e:	b083      	sub	sp, #12
 8000ea0:	af00      	add	r7, sp, #0
 8000ea2:	6078      	str	r0, [r7, #4]
 8000ea4:	460b      	mov	r3, r1
 8000ea6:	70fb      	strb	r3, [r7, #3]

	if (EnorDi == ENABLE)
 8000ea8:	78fb      	ldrb	r3, [r7, #3]
 8000eaa:	2b01      	cmp	r3, #1
 8000eac:	d106      	bne.n	8000ebc <I2C_PeripheralControl+0x20>
	{
		pI2Cx->I2C_CR1 |= (1 << I2C_CR1_PE);
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	681b      	ldr	r3, [r3, #0]
 8000eb2:	f043 0201 	orr.w	r2, r3, #1
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		pI2Cx->I2C_CR1 &= ~(1 << I2C_CR1_PE);
	}
}
 8000eba:	e005      	b.n	8000ec8 <I2C_PeripheralControl+0x2c>
		pI2Cx->I2C_CR1 &= ~(1 << I2C_CR1_PE);
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	f023 0201 	bic.w	r2, r3, #1
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	601a      	str	r2, [r3, #0]
}
 8000ec8:	bf00      	nop
 8000eca:	370c      	adds	r7, #12
 8000ecc:	46bd      	mov	sp, r7
 8000ece:	bc80      	pop	{r7}
 8000ed0:	4770      	bx	lr
	...

08000ed4 <I2C_IRQInterruptConfig>:
  *
  *	@Note				- none

*/
void I2C_IRQInterruptConfig(uint8_t IRQNumber, uint8_t EnorDi)
{
 8000ed4:	b480      	push	{r7}
 8000ed6:	b083      	sub	sp, #12
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	4603      	mov	r3, r0
 8000edc:	460a      	mov	r2, r1
 8000ede:	71fb      	strb	r3, [r7, #7]
 8000ee0:	4613      	mov	r3, r2
 8000ee2:	71bb      	strb	r3, [r7, #6]
	if(EnorDi == ENABLE)
 8000ee4:	79bb      	ldrb	r3, [r7, #6]
 8000ee6:	2b01      	cmp	r3, #1
 8000ee8:	d133      	bne.n	8000f52 <I2C_IRQInterruptConfig+0x7e>
		{
			if(IRQNumber <= 31)
 8000eea:	79fb      	ldrb	r3, [r7, #7]
 8000eec:	2b1f      	cmp	r3, #31
 8000eee:	d80a      	bhi.n	8000f06 <I2C_IRQInterruptConfig+0x32>
			{
				//program ISER0 register
				*NVIC_ISER0 |= ( 1 << IRQNumber );
 8000ef0:	4b34      	ldr	r3, [pc, #208]	; (8000fc4 <I2C_IRQInterruptConfig+0xf0>)
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	79fa      	ldrb	r2, [r7, #7]
 8000ef6:	2101      	movs	r1, #1
 8000ef8:	fa01 f202 	lsl.w	r2, r1, r2
 8000efc:	4611      	mov	r1, r2
 8000efe:	4a31      	ldr	r2, [pc, #196]	; (8000fc4 <I2C_IRQInterruptConfig+0xf0>)
 8000f00:	430b      	orrs	r3, r1
 8000f02:	6013      	str	r3, [r2, #0]
			{
				//program ICER2 register
				*NVIC_ICER3 |= ( 1 << (IRQNumber % 64) );
			}
		}
}
 8000f04:	e059      	b.n	8000fba <I2C_IRQInterruptConfig+0xe6>
			}else if(IRQNumber > 31 && IRQNumber < 64 ) //32 to 63
 8000f06:	79fb      	ldrb	r3, [r7, #7]
 8000f08:	2b1f      	cmp	r3, #31
 8000f0a:	d90f      	bls.n	8000f2c <I2C_IRQInterruptConfig+0x58>
 8000f0c:	79fb      	ldrb	r3, [r7, #7]
 8000f0e:	2b3f      	cmp	r3, #63	; 0x3f
 8000f10:	d80c      	bhi.n	8000f2c <I2C_IRQInterruptConfig+0x58>
				*NVIC_ISER1 |= ( 1 << (IRQNumber % 32) );
 8000f12:	4b2d      	ldr	r3, [pc, #180]	; (8000fc8 <I2C_IRQInterruptConfig+0xf4>)
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	79fa      	ldrb	r2, [r7, #7]
 8000f18:	f002 021f 	and.w	r2, r2, #31
 8000f1c:	2101      	movs	r1, #1
 8000f1e:	fa01 f202 	lsl.w	r2, r1, r2
 8000f22:	4611      	mov	r1, r2
 8000f24:	4a28      	ldr	r2, [pc, #160]	; (8000fc8 <I2C_IRQInterruptConfig+0xf4>)
 8000f26:	430b      	orrs	r3, r1
 8000f28:	6013      	str	r3, [r2, #0]
 8000f2a:	e046      	b.n	8000fba <I2C_IRQInterruptConfig+0xe6>
			else if(IRQNumber >= 64 && IRQNumber < 96 )
 8000f2c:	79fb      	ldrb	r3, [r7, #7]
 8000f2e:	2b3f      	cmp	r3, #63	; 0x3f
 8000f30:	d943      	bls.n	8000fba <I2C_IRQInterruptConfig+0xe6>
 8000f32:	79fb      	ldrb	r3, [r7, #7]
 8000f34:	2b5f      	cmp	r3, #95	; 0x5f
 8000f36:	d840      	bhi.n	8000fba <I2C_IRQInterruptConfig+0xe6>
				*NVIC_ISER3 |= ( 1 << (IRQNumber % 64) );
 8000f38:	4b24      	ldr	r3, [pc, #144]	; (8000fcc <I2C_IRQInterruptConfig+0xf8>)
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	79fa      	ldrb	r2, [r7, #7]
 8000f3e:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8000f42:	2101      	movs	r1, #1
 8000f44:	fa01 f202 	lsl.w	r2, r1, r2
 8000f48:	4611      	mov	r1, r2
 8000f4a:	4a20      	ldr	r2, [pc, #128]	; (8000fcc <I2C_IRQInterruptConfig+0xf8>)
 8000f4c:	430b      	orrs	r3, r1
 8000f4e:	6013      	str	r3, [r2, #0]
}
 8000f50:	e033      	b.n	8000fba <I2C_IRQInterruptConfig+0xe6>
			if(IRQNumber <= 31)
 8000f52:	79fb      	ldrb	r3, [r7, #7]
 8000f54:	2b1f      	cmp	r3, #31
 8000f56:	d80a      	bhi.n	8000f6e <I2C_IRQInterruptConfig+0x9a>
				*NVIC_ICER0 |= ( 1 << IRQNumber );
 8000f58:	4b1d      	ldr	r3, [pc, #116]	; (8000fd0 <I2C_IRQInterruptConfig+0xfc>)
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	79fa      	ldrb	r2, [r7, #7]
 8000f5e:	2101      	movs	r1, #1
 8000f60:	fa01 f202 	lsl.w	r2, r1, r2
 8000f64:	4611      	mov	r1, r2
 8000f66:	4a1a      	ldr	r2, [pc, #104]	; (8000fd0 <I2C_IRQInterruptConfig+0xfc>)
 8000f68:	430b      	orrs	r3, r1
 8000f6a:	6013      	str	r3, [r2, #0]
}
 8000f6c:	e025      	b.n	8000fba <I2C_IRQInterruptConfig+0xe6>
			}else if(IRQNumber > 31 && IRQNumber < 64 )
 8000f6e:	79fb      	ldrb	r3, [r7, #7]
 8000f70:	2b1f      	cmp	r3, #31
 8000f72:	d90f      	bls.n	8000f94 <I2C_IRQInterruptConfig+0xc0>
 8000f74:	79fb      	ldrb	r3, [r7, #7]
 8000f76:	2b3f      	cmp	r3, #63	; 0x3f
 8000f78:	d80c      	bhi.n	8000f94 <I2C_IRQInterruptConfig+0xc0>
				*NVIC_ICER1 |= ( 1 << (IRQNumber % 32) );
 8000f7a:	4b16      	ldr	r3, [pc, #88]	; (8000fd4 <I2C_IRQInterruptConfig+0x100>)
 8000f7c:	681b      	ldr	r3, [r3, #0]
 8000f7e:	79fa      	ldrb	r2, [r7, #7]
 8000f80:	f002 021f 	and.w	r2, r2, #31
 8000f84:	2101      	movs	r1, #1
 8000f86:	fa01 f202 	lsl.w	r2, r1, r2
 8000f8a:	4611      	mov	r1, r2
 8000f8c:	4a11      	ldr	r2, [pc, #68]	; (8000fd4 <I2C_IRQInterruptConfig+0x100>)
 8000f8e:	430b      	orrs	r3, r1
 8000f90:	6013      	str	r3, [r2, #0]
 8000f92:	e012      	b.n	8000fba <I2C_IRQInterruptConfig+0xe6>
			else if(IRQNumber >= 6 && IRQNumber < 96 )
 8000f94:	79fb      	ldrb	r3, [r7, #7]
 8000f96:	2b05      	cmp	r3, #5
 8000f98:	d90f      	bls.n	8000fba <I2C_IRQInterruptConfig+0xe6>
 8000f9a:	79fb      	ldrb	r3, [r7, #7]
 8000f9c:	2b5f      	cmp	r3, #95	; 0x5f
 8000f9e:	d80c      	bhi.n	8000fba <I2C_IRQInterruptConfig+0xe6>
				*NVIC_ICER3 |= ( 1 << (IRQNumber % 64) );
 8000fa0:	4b0d      	ldr	r3, [pc, #52]	; (8000fd8 <I2C_IRQInterruptConfig+0x104>)
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	79fa      	ldrb	r2, [r7, #7]
 8000fa6:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8000faa:	2101      	movs	r1, #1
 8000fac:	fa01 f202 	lsl.w	r2, r1, r2
 8000fb0:	4611      	mov	r1, r2
 8000fb2:	4a09      	ldr	r2, [pc, #36]	; (8000fd8 <I2C_IRQInterruptConfig+0x104>)
 8000fb4:	430b      	orrs	r3, r1
 8000fb6:	6013      	str	r3, [r2, #0]
}
 8000fb8:	e7ff      	b.n	8000fba <I2C_IRQInterruptConfig+0xe6>
 8000fba:	bf00      	nop
 8000fbc:	370c      	adds	r7, #12
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	bc80      	pop	{r7}
 8000fc2:	4770      	bx	lr
 8000fc4:	e000e100 	.word	0xe000e100
 8000fc8:	e000e104 	.word	0xe000e104
 8000fcc:	e000e10c 	.word	0xe000e10c
 8000fd0:	e000e180 	.word	0xe000e180
 8000fd4:	e000e184 	.word	0xe000e184
 8000fd8:	e000e18c 	.word	0xe000e18c

08000fdc <I2C_CloseReceiveData>:
}



void I2C_CloseReceiveData(I2C_Handle_t *pI2C_Handle)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	b082      	sub	sp, #8
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	6078      	str	r0, [r7, #4]
	//To close the communication disable the interrupts

	// Disable the ITBUFEN interrupt
	pI2C_Handle->pI2Cx->I2C_CR2 &= ~ ( 1<< I2C_CR2_ITBUFEN);				//Which prevents further interrupt from TXE and RXNE
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	685a      	ldr	r2, [r3, #4]
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000ff2:	605a      	str	r2, [r3, #4]

	//	Disable the ITEVEN interrupt
	pI2C_Handle->pI2Cx->I2C_CR2 &= ~ ( 1<< I2C_CR2_ITEVTEN);				//Which prevents further interrupt from Events
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	685a      	ldr	r2, [r3, #4]
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001002:	605a      	str	r2, [r3, #4]

	//after that clear all the structure
	pI2C_Handle->TxRxState = I2C_READY;
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	2200      	movs	r2, #0
 8001008:	759a      	strb	r2, [r3, #22]
	pI2C_Handle->pTxBuffer = NULL;
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	2200      	movs	r2, #0
 800100e:	60da      	str	r2, [r3, #12]
	pI2C_Handle->RxLen = 0;
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	2200      	movs	r2, #0
 8001014:	755a      	strb	r2, [r3, #21]
	pI2C_Handle->RxSize = 0;
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	2200      	movs	r2, #0
 800101a:	761a      	strb	r2, [r3, #24]



	//after that enble the Acking
	if ( pI2C_Handle->I2C_Config.I2C_ACKControl == I2C_ACK_ENABLE)
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	7a5b      	ldrb	r3, [r3, #9]
 8001020:	2b01      	cmp	r3, #1
 8001022:	d105      	bne.n	8001030 <I2C_CloseReceiveData+0x54>
	{
		I2C_ManagaeAcking(pI2C_Handle->pI2Cx, I2C_ACK_ENABLE);
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	2101      	movs	r1, #1
 800102a:	4618      	mov	r0, r3
 800102c:	f7ff fd18 	bl	8000a60 <I2C_ManagaeAcking>
	}
}
 8001030:	bf00      	nop
 8001032:	3708      	adds	r7, #8
 8001034:	46bd      	mov	sp, r7
 8001036:	bd80      	pop	{r7, pc}

08001038 <I2C_CloseSendData>:

void I2C_CloseSendData(I2C_Handle_t  *pI2C_Handle)
{
 8001038:	b480      	push	{r7}
 800103a:	b083      	sub	sp, #12
 800103c:	af00      	add	r7, sp, #0
 800103e:	6078      	str	r0, [r7, #4]

	//To close the communication disable the interrupts

		// Disable the ITBUFEN interrupt
		pI2C_Handle->pI2Cx->I2C_CR2 &= ~ ( 1<< I2C_CR2_ITBUFEN);				//Which prevents further interrupt from TXE and RXNE
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	685a      	ldr	r2, [r3, #4]
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800104e:	605a      	str	r2, [r3, #4]

		//	Disable the ITEVEN interrupt
		pI2C_Handle->pI2Cx->I2C_CR2 &= ~ ( 1<< I2C_CR2_ITEVTEN);				//Which prevents further interrupt from Events
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	685a      	ldr	r2, [r3, #4]
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800105e:	605a      	str	r2, [r3, #4]

		pI2C_Handle->TxRxState = I2C_READY;
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	2200      	movs	r2, #0
 8001064:	759a      	strb	r2, [r3, #22]
		pI2C_Handle->pTxBuffer = NULL;
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	2200      	movs	r2, #0
 800106a:	60da      	str	r2, [r3, #12]
		pI2C_Handle->TxLen =0;
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	2200      	movs	r2, #0
 8001070:	751a      	strb	r2, [r3, #20]

}
 8001072:	bf00      	nop
 8001074:	370c      	adds	r7, #12
 8001076:	46bd      	mov	sp, r7
 8001078:	bc80      	pop	{r7}
 800107a:	4770      	bx	lr

0800107c <I2C_MasterHandlerTxEInterrupt>:




static void I2C_MasterHandlerTxEInterrupt(I2C_Handle_t *pI2C_Handle)
{
 800107c:	b480      	push	{r7}
 800107e:	b083      	sub	sp, #12
 8001080:	af00      	add	r7, sp, #0
 8001082:	6078      	str	r0, [r7, #4]

	if(pI2C_Handle->TxLen > 0)
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	7d1b      	ldrb	r3, [r3, #20]
 8001088:	2b00      	cmp	r3, #0
 800108a:	d010      	beq.n	80010ae <I2C_MasterHandlerTxEInterrupt+0x32>
		{
			//1. load the data in to DR
		pI2C_Handle->pI2Cx->DR =  *(pI2C_Handle->pTxBuffer);
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	68db      	ldr	r3, [r3, #12]
 8001090:	781a      	ldrb	r2, [r3, #0]
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	611a      	str	r2, [r3, #16]

			//2. decrement the TxLen
		pI2C_Handle->TxLen--;
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	7d1b      	ldrb	r3, [r3, #20]
 800109c:	3b01      	subs	r3, #1
 800109e:	b2da      	uxtb	r2, r3
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	751a      	strb	r2, [r3, #20]

			//3. Increment the buffer address
		pI2C_Handle->pTxBuffer++;
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	68db      	ldr	r3, [r3, #12]
 80010a8:	1c5a      	adds	r2, r3, #1
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	60da      	str	r2, [r3, #12]

		}
}
 80010ae:	bf00      	nop
 80010b0:	370c      	adds	r7, #12
 80010b2:	46bd      	mov	sp, r7
 80010b4:	bc80      	pop	{r7}
 80010b6:	4770      	bx	lr

080010b8 <I2C_MasterHandlerRxNEInterrupt>:

static void I2C_MasterHandlerRxNEInterrupt(I2C_Handle_t *pI2C_Handle)
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	b082      	sub	sp, #8
 80010bc:	af00      	add	r7, sp, #0
 80010be:	6078      	str	r0, [r7, #4]
				//threre is a two option that is LEN=1 and LEN >1

				//if Len =1
				if(pI2C_Handle->RxSize == 1 )
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	7e1b      	ldrb	r3, [r3, #24]
 80010c4:	2b01      	cmp	r3, #1
 80010c6:	d10c      	bne.n	80010e2 <I2C_MasterHandlerRxNEInterrupt+0x2a>
				{
					*(pI2C_Handle->pRxBuffer) = pI2C_Handle->pI2Cx->DR;
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	691a      	ldr	r2, [r3, #16]
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	691b      	ldr	r3, [r3, #16]
 80010d2:	b2d2      	uxtb	r2, r2
 80010d4:	701a      	strb	r2, [r3, #0]
					pI2C_Handle->RxLen--;
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	7d5b      	ldrb	r3, [r3, #21]
 80010da:	3b01      	subs	r3, #1
 80010dc:	b2da      	uxtb	r2, r3
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	755a      	strb	r2, [r3, #21]
				}


				if(pI2C_Handle->RxSize >1)
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	7e1b      	ldrb	r3, [r3, #24]
 80010e6:	2b01      	cmp	r3, #1
 80010e8:	d91b      	bls.n	8001122 <I2C_MasterHandlerRxNEInterrupt+0x6a>
				{
							//if the len = 2 then disable ack
							if( pI2C_Handle->RxLen == 2 )
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	7d5b      	ldrb	r3, [r3, #21]
 80010ee:	2b02      	cmp	r3, #2
 80010f0:	d105      	bne.n	80010fe <I2C_MasterHandlerRxNEInterrupt+0x46>
							{
									//Disable the Acking
									I2C_ManagaeAcking(pI2C_Handle->pI2Cx, I2C_ACK_DISABLE);
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	2100      	movs	r1, #0
 80010f8:	4618      	mov	r0, r3
 80010fa:	f7ff fcb1 	bl	8000a60 <I2C_ManagaeAcking>
							}

										//Reading data
										*(pI2C_Handle->pRxBuffer)= pI2C_Handle->pI2Cx->DR;
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	691a      	ldr	r2, [r3, #16]
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	691b      	ldr	r3, [r3, #16]
 8001108:	b2d2      	uxtb	r2, r2
 800110a:	701a      	strb	r2, [r3, #0]
										pI2C_Handle->pRxBuffer++;
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	691b      	ldr	r3, [r3, #16]
 8001110:	1c5a      	adds	r2, r3, #1
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	611a      	str	r2, [r3, #16]
										pI2C_Handle->RxLen--;
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	7d5b      	ldrb	r3, [r3, #21]
 800111a:	3b01      	subs	r3, #1
 800111c:	b2da      	uxtb	r2, r3
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	755a      	strb	r2, [r3, #21]

				}

			//if Len =0 , then close i2c and notify the application
				if ( pI2C_Handle->RxLen == 0)
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	7d5b      	ldrb	r3, [r3, #21]
 8001126:	2b00      	cmp	r3, #0
 8001128:	d10f      	bne.n	800114a <I2C_MasterHandlerRxNEInterrupt+0x92>
				{

						if (pI2C_Handle->Sr == I2C_DISABLE_SR)
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	7e5b      	ldrb	r3, [r3, #25]
 800112e:	2b00      	cmp	r3, #0
 8001130:	d104      	bne.n	800113c <I2C_MasterHandlerRxNEInterrupt+0x84>
						{
										//1. Generate stop condition
										I2C_GenerateStopCondition(pI2C_Handle->pI2Cx);
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	4618      	mov	r0, r3
 8001138:	f7ff fc83 	bl	8000a42 <I2C_GenerateStopCondition>
						}

										//2. Close the I2Cx
										I2C_CloseReceiveData(pI2C_Handle);
 800113c:	6878      	ldr	r0, [r7, #4]
 800113e:	f7ff ff4d 	bl	8000fdc <I2C_CloseReceiveData>

										//3. Notify the application
										I2C_ApplicationEventCallback(pI2C_Handle, I2C_EVENT_RX_CMPLT);
 8001142:	2101      	movs	r1, #1
 8001144:	6878      	ldr	r0, [r7, #4]
 8001146:	f7ff f949 	bl	80003dc <I2C_ApplicationEventCallback>


				}
}
 800114a:	bf00      	nop
 800114c:	3708      	adds	r7, #8
 800114e:	46bd      	mov	sp, r7
 8001150:	bd80      	pop	{r7, pc}

08001152 <I2C_EV_IRQHandling>:
  *	@Note				- Interrupt handling for different I2C events (refer SR1)

*/

void I2C_EV_IRQHandling(I2C_Handle_t *pI2C_Handle)
{
 8001152:	b580      	push	{r7, lr}
 8001154:	b086      	sub	sp, #24
 8001156:	af00      	add	r7, sp, #0
 8001158:	6078      	str	r0, [r7, #4]

		//Lets create a variables
			uint32_t temp1, temp2, temp3;

		//first check the ITEVFEN is enables or not
			temp1 = pI2C_Handle->pI2Cx->I2C_CR2 & ( 1 << I2C_CR2_ITEVTEN);			//ITEVENT check if it is enable
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	685b      	ldr	r3, [r3, #4]
 8001160:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001164:	617b      	str	r3, [r7, #20]

			temp2 = pI2C_Handle->pI2Cx->I2C_CR2 & ( 1 << I2C_CR2_ITBUFEN);			//ITBUFEN , check if it is enable
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	685b      	ldr	r3, [r3, #4]
 800116c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001170:	613b      	str	r3, [r7, #16]

			temp3 = pI2C_Handle->pI2Cx->SR1 & ( 1 << I2C_SR1_SB);					//check start bit is enabled or not
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	695b      	ldr	r3, [r3, #20]
 8001178:	f003 0301 	and.w	r3, r3, #1
 800117c:	60fb      	str	r3, [r7, #12]

/*-----------------------------------------------------------------------------------------------------------------------------------------*/
		//1. Handle For interrupt generated by SB event
		//	Note : SB flag is only applicable in Master mode
			if ( temp1 && temp3 )
 800117e:	697b      	ldr	r3, [r7, #20]
 8001180:	2b00      	cmp	r3, #0
 8001182:	d01b      	beq.n	80011bc <I2C_EV_IRQHandling+0x6a>
 8001184:	68fb      	ldr	r3, [r7, #12]
 8001186:	2b00      	cmp	r3, #0
 8001188:	d018      	beq.n	80011bc <I2C_EV_IRQHandling+0x6a>
				//Then this interrupt  is generated by SB event, because SB is generated by master
				//Note : This block will not execute in the slave mode because for Slave SB is always Zero(0)
				//In this block further executes the Address phase

				//based on the application state , we decide write or Read
				if ( pI2C_Handle->TxRxState == I2C_BUSY_IN_TX)									//if busy in Tx, then write, else read
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	7d9b      	ldrb	r3, [r3, #22]
 800118e:	2b02      	cmp	r3, #2
 8001190:	d108      	bne.n	80011a4 <I2C_EV_IRQHandling+0x52>
				{
					I2C_ExecuteAddressPhaseWrite(pI2C_Handle->pI2Cx, pI2C_Handle->DevAddr);
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	681a      	ldr	r2, [r3, #0]
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	7ddb      	ldrb	r3, [r3, #23]
 800119a:	4619      	mov	r1, r3
 800119c:	4610      	mov	r0, r2
 800119e:	f7ff fbef 	bl	8000980 <I2C_ExecuteAddressPhaseWrite>
 80011a2:	e00b      	b.n	80011bc <I2C_EV_IRQHandling+0x6a>
				}
				else	if (pI2C_Handle->TxRxState == I2C_BUSY_IN_RX)
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	7d9b      	ldrb	r3, [r3, #22]
 80011a8:	2b01      	cmp	r3, #1
 80011aa:	d107      	bne.n	80011bc <I2C_EV_IRQHandling+0x6a>
				{
					I2C_ExecuteAddressPhaseRead(pI2C_Handle->pI2Cx, pI2C_Handle->DevAddr);
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	681a      	ldr	r2, [r3, #0]
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	7ddb      	ldrb	r3, [r3, #23]
 80011b4:	4619      	mov	r1, r3
 80011b6:	4610      	mov	r0, r2
 80011b8:	f7ff fbf7 	bl	80009aa <I2C_ExecuteAddressPhaseRead>
				}
			}

/*-----------------------------------------------------------------------------------------------------------------------------------------*/
		temp3 = pI2C_Handle->pI2Cx->SR1 & (1 << I2C_SR1_ADDR);
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	695b      	ldr	r3, [r3, #20]
 80011c2:	f003 0302 	and.w	r3, r3, #2
 80011c6:	60fb      	str	r3, [r7, #12]
		//2. Handle For interrupt generated by ADDR event
		//Note : When master mode : Address is sent
		//		 When Slave mode   : Address matched with own address
			if ( temp1 &&  temp3 )
 80011c8:	697b      	ldr	r3, [r7, #20]
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d005      	beq.n	80011da <I2C_EV_IRQHandling+0x88>
 80011ce:	68fb      	ldr	r3, [r7, #12]
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d002      	beq.n	80011da <I2C_EV_IRQHandling+0x88>
			{
				//Then this interrupt is generated by ADDR event
				//this causes the clock stretching , so clear ADDR flag
				I2C_ClearADDRFlag(pI2C_Handle);
 80011d4:	6878      	ldr	r0, [r7, #4]
 80011d6:	f7ff fbfd 	bl	80009d4 <I2C_ClearADDRFlag>
			}

/*-----------------------------------------------------------------------------------------------------------------------------------------*/

		temp3 = pI2C_Handle->pI2Cx->SR1 & (1 << I2C_SR1_BTF);
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	695b      	ldr	r3, [r3, #20]
 80011e0:	f003 0304 	and.w	r3, r3, #4
 80011e4:	60fb      	str	r3, [r7, #12]
		//3. Handle For interrupt generated by BTF(Byte Transfer Finished) event
			if ( temp1 && temp3 )
 80011e6:	697b      	ldr	r3, [r7, #20]
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d021      	beq.n	8001230 <I2C_EV_IRQHandling+0xde>
 80011ec:	68fb      	ldr	r3, [r7, #12]
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d01e      	beq.n	8001230 <I2C_EV_IRQHandling+0xde>
			{
					//Then the interrupt is generated by BTF event
					//first check the application state
					if (pI2C_Handle->TxRxState == I2C_BUSY_IN_TX)
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	7d9b      	ldrb	r3, [r3, #22]
 80011f6:	2b02      	cmp	r3, #2
 80011f8:	d11a      	bne.n	8001230 <I2C_EV_IRQHandling+0xde>
					{
									//make sure that TXE is also Set
										if ( pI2C_Handle->pI2Cx->SR1 & ( 1 << I2C_SR1_TxE))
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	695b      	ldr	r3, [r3, #20]
 8001200:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001204:	2b00      	cmp	r3, #0
 8001206:	d013      	beq.n	8001230 <I2C_EV_IRQHandling+0xde>
										{
																		//Then, it shows BTF and TXE=1, before closing make sure len =0
																		if (pI2C_Handle->TxLen ==0)
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	7d1b      	ldrb	r3, [r3, #20]
 800120c:	2b00      	cmp	r3, #0
 800120e:	d10f      	bne.n	8001230 <I2C_EV_IRQHandling+0xde>
																		{
																						if (pI2C_Handle->Sr == I2C_DISABLE_SR)
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	7e5b      	ldrb	r3, [r3, #25]
 8001214:	2b00      	cmp	r3, #0
 8001216:	d104      	bne.n	8001222 <I2C_EV_IRQHandling+0xd0>
																						{
																							//1. To close the communication, Generate stop condition
																								I2C_GenerateStopCondition(pI2C_Handle->pI2Cx);
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	4618      	mov	r0, r3
 800121e:	f7ff fc10 	bl	8000a42 <I2C_GenerateStopCondition>
																						}


																					//2.	Reset all the member elements in handle structure
																					I2C_CloseSendData(pI2C_Handle );
 8001222:	6878      	ldr	r0, [r7, #4]
 8001224:	f7ff ff08 	bl	8001038 <I2C_CloseSendData>

																					//3.	Notify about the transmission is complete
																					I2C_ApplicationEventCallback(pI2C_Handle, I2C_EVENT_TX_CMPLT);
 8001228:	2100      	movs	r1, #0
 800122a:	6878      	ldr	r0, [r7, #4]
 800122c:	f7ff f8d6 	bl	80003dc <I2C_ApplicationEventCallback>
								}
}


/*-----------------------------------------------------------------------------------------------------------------------------------------*/
			temp3 = pI2C_Handle->pI2Cx->SR1 & ( 1 << I2C_SR1_STOPF);
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	695b      	ldr	r3, [r3, #20]
 8001236:	f003 0310 	and.w	r3, r3, #16
 800123a:	60fb      	str	r3, [r7, #12]
		//4. Handle For interrupt generated by STOPF event
		// Note : Stop detection flag is applicable only slave mode . For master this flag will never be set
			if ( temp1 && temp3 )
 800123c:	697b      	ldr	r3, [r7, #20]
 800123e:	2b00      	cmp	r3, #0
 8001240:	d00c      	beq.n	800125c <I2C_EV_IRQHandling+0x10a>
 8001242:	68fb      	ldr	r3, [r7, #12]
 8001244:	2b00      	cmp	r3, #0
 8001246:	d009      	beq.n	800125c <I2C_EV_IRQHandling+0x10a>
			{
				// This interrupt is generated by the STOPF event, and makes stop flag as 1 (read RM).
				//So to clear that , by writing in Cr1 register

				pI2C_Handle->pI2Cx->I2C_CR1 |= 0x0000;			//to clear stopf flag, just do bit wise with 0 in Cr1 register
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	681a      	ldr	r2, [r3, #0]
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	6812      	ldr	r2, [r2, #0]
 8001252:	601a      	str	r2, [r3, #0]

				//Notify the application that stop is generated by Master( detected)
				I2C_ApplicationEventCallback(pI2C_Handle, I2C_EV_STOP);
 8001254:	2102      	movs	r1, #2
 8001256:	6878      	ldr	r0, [r7, #4]
 8001258:	f7ff f8c0 	bl	80003dc <I2C_ApplicationEventCallback>
			}

/*-----------------------------------------------------------------------------------------------------------------------------------------*/
		//It is generated by enableing ITBUFFEN and ITEVNT register
		//5. Handle For interrupt generated by TXE event . if ITBUFEN =1 , when TXE becomes 1
			temp3 = pI2C_Handle->pI2Cx->SR1 & (1 << I2C_SR1_TxE);						//check TXE =1
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	695b      	ldr	r3, [r3, #20]
 8001262:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001266:	60fb      	str	r3, [r7, #12]
		//temp1 = ITEVNT, temp2= ITBUFFEN, temp3 = TXE

			if ( temp1 && temp2 && temp3 )
 8001268:	697b      	ldr	r3, [r7, #20]
 800126a:	2b00      	cmp	r3, #0
 800126c:	d013      	beq.n	8001296 <I2C_EV_IRQHandling+0x144>
 800126e:	693b      	ldr	r3, [r7, #16]
 8001270:	2b00      	cmp	r3, #0
 8001272:	d010      	beq.n	8001296 <I2C_EV_IRQHandling+0x144>
 8001274:	68fb      	ldr	r3, [r7, #12]
 8001276:	2b00      	cmp	r3, #0
 8001278:	d00d      	beq.n	8001296 <I2C_EV_IRQHandling+0x144>
			{
				//Before that check the device in master mode , by MSL bit in SR2 register
				if (pI2C_Handle->pI2Cx->SR2 & (1 << I2C_SR2_MSL))
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	699b      	ldr	r3, [r3, #24]
 8001280:	f003 0301 	and.w	r3, r3, #1
 8001284:	2b00      	cmp	r3, #0
 8001286:	d006      	beq.n	8001296 <I2C_EV_IRQHandling+0x144>
					{
							//This is Genereted by TXE
							//We have to write the data in DR register (check Rm),first check state of the I2C
							if ( pI2C_Handle->TxRxState == I2C_BUSY_IN_TX)
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	7d9b      	ldrb	r3, [r3, #22]
 800128c:	2b02      	cmp	r3, #2
 800128e:	d102      	bne.n	8001296 <I2C_EV_IRQHandling+0x144>
							{
									I2C_MasterHandlerTxEInterrupt(pI2C_Handle);
 8001290:	6878      	ldr	r0, [r7, #4]
 8001292:	f7ff fef3 	bl	800107c <I2C_MasterHandlerTxEInterrupt>
					}

			}

/*-----------------------------------------------------------------------------------------------------------------------------------------*/
			temp3 = pI2C_Handle->pI2Cx->SR1 & (1 << I2C_SR1_RxNE);
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	695b      	ldr	r3, [r3, #20]
 800129c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80012a0:	60fb      	str	r3, [r7, #12]
		//6. Handle For interrupt generated by RXNE event if ITBUFFEN = 1 , when

			if ( temp1 && temp2 && temp3)
 80012a2:	697b      	ldr	r3, [r7, #20]
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d013      	beq.n	80012d0 <I2C_EV_IRQHandling+0x17e>
 80012a8:	693b      	ldr	r3, [r7, #16]
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d010      	beq.n	80012d0 <I2C_EV_IRQHandling+0x17e>
 80012ae:	68fb      	ldr	r3, [r7, #12]
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d00d      	beq.n	80012d0 <I2C_EV_IRQHandling+0x17e>
			{
					//Check the device mode is master
					if ( pI2C_Handle->pI2Cx->SR2 & ( 1 << I2C_SR2_MSL))
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	699b      	ldr	r3, [r3, #24]
 80012ba:	f003 0301 	and.w	r3, r3, #1
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d006      	beq.n	80012d0 <I2C_EV_IRQHandling+0x17e>
					{
									//This interrupt is generated by RxNE
									//check the state
									if ( pI2C_Handle->TxRxState == I2C_BUSY_IN_RX)
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	7d9b      	ldrb	r3, [r3, #22]
 80012c6:	2b01      	cmp	r3, #1
 80012c8:	d102      	bne.n	80012d0 <I2C_EV_IRQHandling+0x17e>
									{
										I2C_MasterHandlerRxNEInterrupt(pI2C_Handle);
 80012ca:	6878      	ldr	r0, [r7, #4]
 80012cc:	f7ff fef4 	bl	80010b8 <I2C_MasterHandlerRxNEInterrupt>
									}
					}
			}
}
 80012d0:	bf00      	nop
 80012d2:	3718      	adds	r7, #24
 80012d4:	46bd      	mov	sp, r7
 80012d6:	bd80      	pop	{r7, pc}

080012d8 <I2C_ER_IRQHandling>:
						#define I2C_ERROR_TIMEOUT 7

 */

void I2C_ER_IRQHandling(I2C_Handle_t *pI2C_Handle)
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	b084      	sub	sp, #16
 80012dc:	af00      	add	r7, sp, #0
 80012de:	6078      	str	r0, [r7, #4]
	uint32_t temp1 ,temp2;

			//Know the status of ITERREN register is set or not , in CR2 register
			temp2 = pI2C_Handle->pI2Cx->I2C_CR2 & ( 1 << I2C_CR2_ITERREN);
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	685b      	ldr	r3, [r3, #4]
 80012e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80012ea:	60fb      	str	r3, [r7, #12]

/**************************************check for Bus error**************************************************************** */

			temp1 = pI2C_Handle->pI2Cx->SR1 & ( 1 << I2C_SR1_BERR);
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	695b      	ldr	r3, [r3, #20]
 80012f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80012f6:	60bb      	str	r3, [r7, #8]

			if ( temp1 && temp2 )
 80012f8:	68bb      	ldr	r3, [r7, #8]
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d00e      	beq.n	800131c <I2C_ER_IRQHandling+0x44>
 80012fe:	68fb      	ldr	r3, [r7, #12]
 8001300:	2b00      	cmp	r3, #0
 8001302:	d00b      	beq.n	800131c <I2C_ER_IRQHandling+0x44>
			{
				//This is bus error

				//so , to clear the bus ready, by writing 0 to it
				pI2C_Handle->pI2Cx->SR1 &= ~( 1 << I2C_SR1_BERR);				//writing to BEER register
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	695a      	ldr	r2, [r3, #20]
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001312:	615a      	str	r2, [r3, #20]

				//Implement the code to nofity the application about the error
				I2C_ApplicationEventCallback(pI2C_Handle, I2C_ERROR_BERR);
 8001314:	2103      	movs	r1, #3
 8001316:	6878      	ldr	r0, [r7, #4]
 8001318:	f7ff f860 	bl	80003dc <I2C_ApplicationEventCallback>
			}

/***************************************check for arbitration lost error******************************************************/
			temp1 = (pI2C_Handle->pI2Cx->SR1 & ( 1 << I2C_SR1_ARLO));
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	695b      	ldr	r3, [r3, #20]
 8001322:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001326:	60bb      	str	r3, [r7, #8]

			if (temp1 && temp2 )
 8001328:	68bb      	ldr	r3, [r7, #8]
 800132a:	2b00      	cmp	r3, #0
 800132c:	d00e      	beq.n	800134c <I2C_ER_IRQHandling+0x74>
 800132e:	68fb      	ldr	r3, [r7, #12]
 8001330:	2b00      	cmp	r3, #0
 8001332:	d00b      	beq.n	800134c <I2C_ER_IRQHandling+0x74>
			{
				//This is arbiration loss error by Master

				//To clear that , by writing 0 to it
				pI2C_Handle->pI2Cx->SR1 &= ~ (1 << I2C_SR1_ARLO);
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	695a      	ldr	r2, [r3, #20]
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001342:	615a      	str	r2, [r3, #20]

				//To implement the code to notify application about the error
				I2C_ApplicationEventCallback(pI2C_Handle, I2C_ERROR_ARLO);
 8001344:	2104      	movs	r1, #4
 8001346:	6878      	ldr	r0, [r7, #4]
 8001348:	f7ff f848 	bl	80003dc <I2C_ApplicationEventCallback>
			}

/*****************************************Check for ACK failure  error******************************************************/

			temp1 = (pI2C_Handle->pI2Cx->SR1 & (1 << I2C_SR1_AF));
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	695b      	ldr	r3, [r3, #20]
 8001352:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001356:	60bb      	str	r3, [r7, #8]

			if (temp1 && temp2 )
 8001358:	68bb      	ldr	r3, [r7, #8]
 800135a:	2b00      	cmp	r3, #0
 800135c:	d00e      	beq.n	800137c <I2C_ER_IRQHandling+0xa4>
 800135e:	68fb      	ldr	r3, [r7, #12]
 8001360:	2b00      	cmp	r3, #0
 8001362:	d00b      	beq.n	800137c <I2C_ER_IRQHandling+0xa4>
			{
				//This is ACK (AF) Error

				//To clear the ACK , writing 0 to it
				pI2C_Handle->pI2Cx->SR1 &= ~(1 << I2C_SR1_AF);
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	695a      	ldr	r2, [r3, #20]
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001372:	615a      	str	r2, [r3, #20]

				//To implement the code to notify application about the error
				I2C_ApplicationEventCallback(pI2C_Handle, I2C_ERROR_AF);
 8001374:	2105      	movs	r1, #5
 8001376:	6878      	ldr	r0, [r7, #4]
 8001378:	f7ff f830 	bl	80003dc <I2C_ApplicationEventCallback>

			}

/*******************************************Check for Overrun/underrun error*****************************************************/

			temp1= pI2C_Handle->pI2Cx->SR1 & ( 1 << I2C_SR1_OVR);
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	695b      	ldr	r3, [r3, #20]
 8001382:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001386:	60bb      	str	r3, [r7, #8]

			if (temp1 && temp2 )
 8001388:	68bb      	ldr	r3, [r7, #8]
 800138a:	2b00      	cmp	r3, #0
 800138c:	d00e      	beq.n	80013ac <I2C_ER_IRQHandling+0xd4>
 800138e:	68fb      	ldr	r3, [r7, #12]
 8001390:	2b00      	cmp	r3, #0
 8001392:	d00b      	beq.n	80013ac <I2C_ER_IRQHandling+0xd4>
			{
				//This is OVR error

				//To clear that , writing 0 to it
				pI2C_Handle->pI2Cx->SR1 &= ~ ( 1 << I2C_SR1_OVR);
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	695a      	ldr	r2, [r3, #20]
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80013a2:	615a      	str	r2, [r3, #20]

				//To implement the code to notify the application about the error
				I2C_ApplicationEventCallback(pI2C_Handle, I2C_ERROR_OVR);
 80013a4:	2106      	movs	r1, #6
 80013a6:	6878      	ldr	r0, [r7, #4]
 80013a8:	f7ff f818 	bl	80003dc <I2C_ApplicationEventCallback>
			}

/****************************************Check for Time out error***************************************************************/
			temp1 = (pI2C_Handle->pI2Cx->SR1 & ( 1 << I2C_SR1_TIMEOUT));
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	695b      	ldr	r3, [r3, #20]
 80013b2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80013b6:	60bb      	str	r3, [r7, #8]

			if ( temp1 && temp2 )
 80013b8:	68bb      	ldr	r3, [r7, #8]
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d00e      	beq.n	80013dc <I2C_ER_IRQHandling+0x104>
 80013be:	68fb      	ldr	r3, [r7, #12]
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d00b      	beq.n	80013dc <I2C_ER_IRQHandling+0x104>
			{
				//This is Time Out Error

				//To clear this , writing 0 to it
				pI2C_Handle->pI2Cx->SR1 &= ~ (1 << I2C_SR1_TIMEOUT);
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	695a      	ldr	r2, [r3, #20]
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80013d2:	615a      	str	r2, [r3, #20]

				//To implement the code to notify the application about the error
				I2C_ApplicationEventCallback(pI2C_Handle, I2C_ERROR_TIMEOUT);
 80013d4:	2107      	movs	r1, #7
 80013d6:	6878      	ldr	r0, [r7, #4]
 80013d8:	f7ff f800 	bl	80003dc <I2C_ApplicationEventCallback>
			}

}
 80013dc:	bf00      	nop
 80013de:	3710      	adds	r7, #16
 80013e0:	46bd      	mov	sp, r7
 80013e2:	bd80      	pop	{r7, pc}

080013e4 <__libc_init_array>:
 80013e4:	b570      	push	{r4, r5, r6, lr}
 80013e6:	4e0d      	ldr	r6, [pc, #52]	; (800141c <__libc_init_array+0x38>)
 80013e8:	4c0d      	ldr	r4, [pc, #52]	; (8001420 <__libc_init_array+0x3c>)
 80013ea:	1ba4      	subs	r4, r4, r6
 80013ec:	10a4      	asrs	r4, r4, #2
 80013ee:	2500      	movs	r5, #0
 80013f0:	42a5      	cmp	r5, r4
 80013f2:	d109      	bne.n	8001408 <__libc_init_array+0x24>
 80013f4:	4e0b      	ldr	r6, [pc, #44]	; (8001424 <__libc_init_array+0x40>)
 80013f6:	4c0c      	ldr	r4, [pc, #48]	; (8001428 <__libc_init_array+0x44>)
 80013f8:	f000 f818 	bl	800142c <_init>
 80013fc:	1ba4      	subs	r4, r4, r6
 80013fe:	10a4      	asrs	r4, r4, #2
 8001400:	2500      	movs	r5, #0
 8001402:	42a5      	cmp	r5, r4
 8001404:	d105      	bne.n	8001412 <__libc_init_array+0x2e>
 8001406:	bd70      	pop	{r4, r5, r6, pc}
 8001408:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800140c:	4798      	blx	r3
 800140e:	3501      	adds	r5, #1
 8001410:	e7ee      	b.n	80013f0 <__libc_init_array+0xc>
 8001412:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001416:	4798      	blx	r3
 8001418:	3501      	adds	r5, #1
 800141a:	e7f2      	b.n	8001402 <__libc_init_array+0x1e>
 800141c:	08001444 	.word	0x08001444
 8001420:	08001444 	.word	0x08001444
 8001424:	08001444 	.word	0x08001444
 8001428:	08001448 	.word	0x08001448

0800142c <_init>:
 800142c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800142e:	bf00      	nop
 8001430:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001432:	bc08      	pop	{r3}
 8001434:	469e      	mov	lr, r3
 8001436:	4770      	bx	lr

08001438 <_fini>:
 8001438:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800143a:	bf00      	nop
 800143c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800143e:	bc08      	pop	{r3}
 8001440:	469e      	mov	lr, r3
 8001442:	4770      	bx	lr
